{"version":3,"file":"static/js/843.e1d4459e.chunk.js","mappings":"4RA6CA,MAwcA,EAxccA,KACZ,MAAMC,GAAWC,EAAAA,EAAAA,MAEXC,GAAWC,EAAAA,EAAAA,KAAaC,GAAoBA,EAAMC,MAAMH,WACxDI,GAAeH,EAAAA,EAAAA,KAClBC,GAAoBA,EAAMC,MAAMC,gBAG5BC,EAAYC,IAAiBC,EAAAA,EAAAA,UAAiB,KAC9CC,EAAQC,IAAaF,EAAAA,EAAAA,UAAiB,KACtCG,EAAMC,IAAWJ,EAAAA,EAAAA,UAAiB,KAClCK,EAAMC,IAAWN,EAAAA,EAAAA,UAAiB,KAClCO,EAAWC,IAAgBR,EAAAA,EAAAA,UAAiB,IAC5CS,EAAKC,IAAUV,EAAAA,EAAAA,WAAkB,IACjCW,EAAIC,IAASZ,EAAAA,EAAAA,WAAkB,IAC/Ba,EAAUC,IAAed,EAAAA,EAAAA,WAAkB,IAC3Ce,EAASC,IAAchB,EAAAA,EAAAA,WAAkB,IACzCiB,EAAIC,IAASlB,EAAAA,EAAAA,WAAkB,IAC/BmB,EAAQC,IAAapB,EAAAA,EAAAA,WAAkB,IAEvCqB,EAAcC,IAAmBtB,EAAAA,EAAAA,WAAkB,IACnDuB,EAAWC,IAAgBxB,EAAAA,EAAAA,WAAS,IACpCyB,EAAOC,IAAY1B,EAAAA,EAAAA,UAAiB,KAE3C2B,EAAAA,EAAAA,YAAU,KACR,MAAMC,EAAM,IAAIC,IAAIC,OAAOC,SAASC,YAC9BC,GAASC,EAAAA,EAAAA,IAAWN,EAAIO,UACxBC,EAAyDR,EAAIQ,KAC7DC,EAAQ5B,EACV,MACA,MACE,MAAM6B,EAAI,GAKV,OAJI3B,GAAI2B,EAAEC,KAAK,MACX1B,GAAUyB,EAAEC,KAAK,YACjBxB,GAASuB,EAAEC,KAAK,WAChBtB,GAAIqB,EAAEC,KAAK,MACRD,EAAEE,KAAK,IACf,EAPD,GAUEC,EAAe,IAAIZ,IAAIa,SAASC,SAASC,SAEzCnB,EAAQ,IAAII,IAChB,GAAGI,OAAYL,EAAIiB,YAAYT,IAAOK,aAExChB,EAAMqB,aAAaC,OAAO,QAASV,GACnCZ,EAAMqB,aAAaC,OAAO,YAAaxC,EAAUyB,YACjDP,EAAMqB,aAAaC,OAAO,aAAc5B,EAAS,MAAQ,MACzDM,EAAMqB,aAAaC,OAAO,aAAcjD,GACxC2B,EAAMqB,aAAaC,OAAO,SAAU9C,GACpCwB,EAAMqB,aAAaC,OAAO,WAAY5C,GACtCsB,EAAMqB,aAAaC,OAAO,OAAQ1C,GAClCqB,EAASD,EAAMuB,KAAK,GACnB,CACDvC,EACAE,EACAE,EACAE,EACAE,EACAV,EACAY,EACArB,EACAG,EACAE,EACAE,IAGF,MAAM,YAAE4C,EAAW,gBAAEC,EAAe,WAAEC,IACpCC,EAAAA,EAAAA,IACE3B,EACA,CACE4B,UAAW,CACTC,QAAS,KACTC,SAAU,IACVC,QAAS,UAGbjC,GA0BJ,OAvBAI,EAAAA,EAAAA,YAAU,KACJwB,IAAeM,EAAAA,GAAWC,WAC5BnE,GAASoE,EAAAA,EAAAA,OACAR,IAAeM,EAAAA,GAAWG,KACnCrE,GAASsE,EAAAA,EAAAA,IAAgB,IAChBV,IAAeM,EAAAA,GAAWK,QACnCvE,GAASsE,EAAAA,EAAAA,IAAgB,GAC3B,GACC,CAACV,EAAY5D,EAAU0D,KAE1BtB,EAAAA,EAAAA,YAAU,KACJuB,IACFA,EAAgBa,MAAQC,EAAAA,GAASC,QAAQf,EAAgBgB,MAAMC,WAC/DjB,EAAgBkB,IAAMC,KAAKC,SAC3B/E,GAASgF,EAAAA,EAAAA,IAAqBrB,IAChC,GACC,CAACA,EAAiB3D,KAErBoC,EAAAA,EAAAA,YAAU,KACRpC,GAASiF,EAAAA,EAAAA,IAAY,SAAS,GAE7B,KAGDC,EAAAA,EAAAA,MAACC,EAAAA,SAAQ,CAAAC,SAAA,EACPC,EAAAA,EAAAA,KAACC,EAAAA,EAAiB,CAACC,MAAO,QAASC,SAASH,EAAAA,EAAAA,KAACI,EAAAA,EAAQ,OAErDJ,EAAAA,EAAAA,KAACK,EAAAA,IAAU,CAAAN,UACTC,EAAAA,EAAAA,KAACM,EAAAA,IAAG,CAACC,aAAW,EAAAR,UACdF,EAAAA,EAAAA,MAACW,EAAAA,IAAI,CAACC,WAAS,EAAAV,SAAA,EACbF,EAAAA,EAAAA,MAACW,EAAAA,IAAI,CACHE,MAAI,EACJC,GAAI,GACJC,GAAI,CACFC,QAAS,OACTC,SAAU,SAEV,0BAA2B,CACzBC,SAAU,OACVC,WAAY,WAEdjB,SAAA,EAEFC,EAAAA,EAAAA,KAACM,EAAAA,IAAG,CACFM,GAAI,CACFG,SAAU,OACVC,WAAY,IACZC,QAAS,mBACTlB,SACH,oBAGDF,EAAAA,EAAAA,MAACS,EAAAA,IAAG,CACFY,UAAW,IAAGjG,EAAe,iBAAmB,IAChD2F,GAAI,CACFC,QAAS,OACTM,WAAY,SACZC,eAAgB,iBAChBrB,SAAA,EAEFF,EAAAA,EAAAA,MAACS,EAAAA,IAAG,CACFM,GAAI,CACFC,QAAS,OACTC,SAAU,MACV,wBAAyB,CACvBO,OAAQ,iBAEV,CAAC,sBAAsBC,EAAAA,IAAYC,SAAU,CAC3CC,IAAK,KAEPzB,SAAA,EAEFC,EAAAA,EAAAA,KAACyB,EAAAA,IAAQ,CACPC,QAAS7F,EACT8F,GAAI,YACJC,KAAM,YACN1B,MAAO,MACP2B,SAAUA,IAAM/F,GAAQD,GACxBiG,MAAO,MACPC,SAAU9G,KAEZ+E,EAAAA,EAAAA,KAACyB,EAAAA,IAAQ,CACPC,QAAS3F,GAAMF,EACf8F,GAAI,WACJC,KAAM,WACN1B,MAAO,KACP2B,SAAUA,IAAM7F,GAAOD,GACvB+F,MAAO,KACPC,SAAUlG,GAAOZ,KAEnB+E,EAAAA,EAAAA,KAACyB,EAAAA,IAAQ,CACPC,QAASzF,GAAYJ,EACrB8F,GAAI,iBACJC,KAAM,iBACN1B,MAAO,WACP2B,SAAUA,IAAM3F,GAAaD,GAC7B6F,MAAO,WACPC,SAAUlG,GAAOZ,KAEnB+E,EAAAA,EAAAA,KAACyB,EAAAA,IAAQ,CACPC,QAASvF,GAAWN,EACpB8F,GAAI,gBACJC,KAAM,gBACN1B,MAAO,UACP2B,SAAUA,IAAMzF,GAAYD,GAC5B2F,MAAO,UACPC,SAAUlG,GAAOZ,KAEnB+E,EAAAA,EAAAA,KAACyB,EAAAA,IAAQ,CACPC,QAASrF,GAAMR,EACf8F,GAAI,WACJC,KAAM,WACN1B,MAAO,KACP2B,SAAUA,IAAMvF,GAAOD,GACvByF,MAAO,KACPC,SAAUlG,GAAOZ,QAGrB4E,EAAAA,EAAAA,MAACS,EAAAA,IAAG,CACFM,GAAI,CACFC,QAAS,OACTM,WAAY,SACZC,eAAgB,gBAChBI,IAAK,QACLzB,SAAA,EAEFC,EAAAA,EAAAA,KAACgC,EAAAA,EAAc,CAACC,QAAS,sBAAsBlC,UAC7CC,EAAAA,EAAAA,KAACkC,EAAAA,IAAM,CACLP,GAAI,gBACJQ,QAASA,IAAMzF,GAAiBD,GAChCyD,MAAO,UACPkC,MAAMpC,EAAAA,EAAAA,KAACqC,EAAAA,IAAU,IACjBC,QAAS,UACTpB,UAAW,wBACXqB,MAAO,CACLC,MAAO,QACPC,WAAYhG,EAAe,wBAA0B,SAKzDxB,IACA+E,EAAAA,EAAAA,KAACkC,EAAAA,IAAM,CACLP,GAAI,cACJzB,MAAO,QACP,eAAc,qBACdoC,QAAQ,aACRH,QAASA,IAAMvF,GAAa,GAC5B2F,MAAO,CACLC,MAAO,WAIZvH,IACC+E,EAAAA,EAAAA,KAACkC,EAAAA,IAAM,CACLP,GAAI,aACJzB,MAAO,aACP,eAAc,oBACdoC,QAAQ,aACRH,QAASA,IAAMvF,GAAa,GAC5B2F,MAAO,CACLC,MAAO,oBAOlB/F,GACCoD,EAAAA,EAAAA,MAACS,EAAAA,IAAG,CACFoC,eAAa,EACbxB,UAAW,IAAGjG,EAAe,iBAAmB,IAChD2F,GAAI,CACF+B,UAAW,OACX9B,QAAS,OACTC,SAAU,SACVG,QAAS,OACTuB,MAAO,OAEP,qBAAsB,CACpB1B,SAAU,SACV,UAAW,CACT8B,aAAc,OACd5B,WAAY,KAEd,iBAAkB,CAChBwB,MAAO,QAIX,0BAA2B,CACzBzB,SAAU,OACVC,WAAY,WAEdjB,SAAA,EAEFF,EAAAA,EAAAA,MAACS,EAAAA,IAAG,CACFM,GAAI,CACFC,QAAS,QACTd,SAAA,EAEFC,EAAAA,EAAAA,KAAC6C,EAAAA,IAAQ,CACP3B,UAAU,kBACVS,GAAG,oBACHC,KAAK,oBACL1B,MAAM,cACN4C,YAAY,WACZhB,MAAO5G,EACP2G,SAAWkB,GAAM5H,EAAc4H,EAAEC,OAAOlB,OACxCC,SAAU9G,KAGZ+E,EAAAA,EAAAA,KAAC6C,EAAAA,IAAQ,CACP3B,UAAU,kBACVS,GAAG,sBACHC,KAAK,sBACL1B,MAAM,gBACN4C,YAAY,wBACZhB,MAAOvG,EACPsG,SAAWkB,GAAMvH,EAAQuH,EAAEC,OAAOlB,OAClCC,SAAU9G,KAGZ+E,EAAAA,EAAAA,KAAC6C,EAAAA,IAAQ,CACP3B,UAAU,kBACVS,GAAG,eACHC,KAAK,eACL1B,MAAM,SACN4C,YAAY,mBACZhB,MAAOzG,EACPwG,SAAWkB,GAAMzH,EAAUyH,EAAEC,OAAOlB,OACpCC,SAAU9G,QAGd4E,EAAAA,EAAAA,MAACS,EAAAA,IAAG,CACFM,GAAI,CACFY,IAAK,OACLX,QAAS,OACToC,oBAAqB,UACrBT,MAAO,OACPG,UAAW,QACX5C,SAAA,EAEFC,EAAAA,EAAAA,KAACM,EAAAA,IAAG,CACFM,GAAI,CACFsC,KAAM,EACNV,MAAO,sBACPzC,UAEFC,EAAAA,EAAAA,KAAC6C,EAAAA,IAAQ,CACP3B,UAAU,kBACVS,GAAG,aACHC,KAAK,aACL1B,MAAM,OACN4C,YAAY,6BACZhB,MAAOrG,EACPoG,SAAWkB,GAAMrH,EAAQqH,EAAEC,OAAOlB,OAClCC,SAAU9G,OAGd+E,EAAAA,EAAAA,KAACM,EAAAA,IAAG,CACFM,GAAI,CACFuC,WAAY,QACZpD,UAEFC,EAAAA,EAAAA,KAAC6C,EAAAA,IAAQ,CACP3B,UAAU,kBACVS,GAAG,mBACHC,KAAK,mBACL1B,MAAM,qBACNkD,KAAK,SACLN,YAAY,8BACZhB,MAAO,GAAGnG,IACVkG,SAAWkB,GAAMnH,EAAayH,SAASN,EAAEC,OAAOlB,QAChDC,SAAU9G,UAIhB+E,EAAAA,EAAAA,KAACM,EAAAA,IAAG,CACFM,GAAI,CACFC,QAAS,OACTM,WAAY,SACZC,eAAgB,aAChBuB,UAAW,QACX5C,UAEFC,EAAAA,EAAAA,KAACyB,EAAAA,IAAQ,CACPC,QAASnF,EACToF,GAAI,cACJC,KAAM,cACN1B,MAAO,sBACP2B,SAAUA,IAAMrF,GAAWD,GAC3BuF,MAAO,cACPC,SAAU9G,SAId,MAEJ+E,EAAAA,EAAAA,KAACQ,EAAAA,IAAI,CAACE,MAAI,EAACC,GAAI,GAAGZ,UAChBC,EAAAA,EAAAA,KAACM,EAAAA,IAAG,CACFM,GAAI,CACFG,SAAU,OACVC,WAAY,IACZ4B,aAAc,OACdD,UAAW,QACX5C,SACH,qBAIHC,EAAAA,EAAAA,KAACQ,EAAAA,IAAI,CAACE,MAAI,EAACC,GAAI,GAAGZ,UAChBC,EAAAA,EAAAA,KAACsD,EAAAA,IAAS,CACRC,QAAS,CACP,CACErD,MAAO,OACPsD,WAAY,QACZC,eAAiBnE,IACf,MAAMoE,EAAY,IAAIC,KAAKrE,GAC3B,OAAOsE,EAAAA,EAAAA,IAAaF,EAAU,EAEhClB,MAAO,KAET,CAAEtC,MAAO,OAAQsD,WAAY,OAC7B,CACEtD,MAAO,SACPsD,WAAY,GACZC,eAAiBI,GACf,GAAGA,EAAY3I,cAAc2I,EAAYC,YAC3CC,kBAAkB,GAEpB,CACE7D,MAAO,WACPsD,WAAY,mBACZC,eAAiBI,GACf,GAAGA,EAAYG,QAAQH,EAAYI,SACrCF,kBAAkB,GAEpB,CACE7D,MAAO,YACPsD,WAAY,qBACZhB,MAAO,KAET,CACEtC,MAAO,SACPsD,WAAY,eACZC,eAAgBS,EAAAA,GAChB1B,MAAO,KAET,CACEtC,MAAO,WACPsD,WAAY,eACZC,eAAgBS,EAAAA,GAChB1B,MAAO,MAGX2B,WAAW,EACXC,QAASvJ,EACTwJ,WAAW,SACXC,QAAQ,MACRC,mBACEtJ,EACI,kCACA,2BAENuJ,kBAAmB,sBACnBC,oBAAkB,eAMnB,C,kCCjff,IAAAC,EAAAC,EAAA,MAASC,OAAAA,eAAAA,EAAAA,KAAAA,CAAAC,YAAA,EAAAC,IAAA,kBAAAJ,EAAAlG,YAAY,IAIrB,IAAAuG,EAAAJ,EAAA,OAEA,IAAAK,EAAAL,EAAA,MAASC,OAAAA,eAAAA,EAAAA,KAAAA,CAAAC,YAAA,EAAAC,IAAA,kBAAAE,EAAAnG,UAAU,IAEnB,IAAAoG,EAAAN,EAAA,OAEA,IAAAO,EAAAP,EAAA,M,2UCTA,IAAAQ,EAAAR,EAAA,OACAS,EAAAT,EAAA,OACAK,EAAAL,EAAA,MAOAO,EAAAP,EAAA,OAoIaU,EAAAA,gBAAkB,SAC3BC,EACAC,EACAC,EACAC,EACAC,EACArH,GAEM,IAEJM,EACAgH,EACAC,EAJIC,EAAkCN,EAAOM,eAAzBC,EAAkBP,EAAOO,cAuCjD,OAjCIN,EAAWO,QAAQC,eACrBrH,GAAW,EAAAwG,EAAAc,mBAAkB5H,IA5IN,SACzBiH,EACAE,EACAK,GAEA,IAAIK,EAEJ,GAAIV,EAAWO,QAAQtH,WAAa6G,aAA6Ba,UAAW,CAC1E,IAAMC,EACoC,mBAAjCZ,EAAWO,QAAQtH,eACtB4H,EACAb,EAAWO,QAAQtH,UACzByH,GAAc,EAAAd,EAAA3G,WAAU6G,EAAmBc,E,CAG7Cd,EAAkBgB,UAAY,SAAC5H,G,MAClB,OAAXwH,QAAW,IAAXA,GAAAA,IACAV,EAAWO,QAAQQ,WAAaf,EAAWO,QAAQQ,UAAU7H,GACpB,oBAA9B8G,EAAWO,QAAQS,SAAgE,IAAvChB,EAAWO,QAAQS,OAAO9H,IAI/E8G,EAAWO,QAAQtH,WACqB,mBAAjC+G,EAAWO,QAAQtH,YACE,QAA5BgI,EAAAjB,EAAWO,QAAQtH,iBAAS,IAAAgI,OAAA,EAAAA,EAAEC,iBAAkBhI,EAAQiI,MAI1Dd,EAAenH,EACjB,CACF,CAiHEkI,CACEtB,EACAE,EACAK,GAlHoB,SACtBP,EACAE,EACAM,EACAJ,GAEAJ,EAAkBuB,OAAS,SAACC,GAC1BtB,EAAWO,QAAQgB,QAAUvB,EAAWO,QAAQgB,OAAOD,GACvDpB,EAAeK,QAAU,EACzBD,EAAcd,EAAAnG,WAAWG,KAC3B,CACF,CA0GEgI,CACE1B,EACAE,EACAM,EACAJ,GAGFC,EA/GuB,SACvBL,EACAE,EACAM,EACAL,EACAC,GAEA,OAAIV,EAAAiC,wBAA0B3B,aAA6B4B,YAClD,WAAO,IAEhB,EAAAhC,EAAAiC,mBAAkB7B,EAAmBE,EAAWO,QAAQqB,YAGxD9B,EAAkB+B,QAAU,SAACP,G,MAG3B,GAFAtB,EAAWO,QAAQuB,SAAW9B,EAAWO,QAAQuB,QAAQR,GACzDhB,EAAcd,EAAAnG,WAAWK,QACrBsG,EAAWO,QAAQwB,iBAAmB/B,EAAWO,QAAQwB,gBAAgBT,GAAQ,CACnF,IAAMU,EAAwD,QAApCf,EAAAjB,EAAWO,QAAQyB,yBAAiB,IAAAf,EAAAA,EAAIzB,EAAAyC,wBAClE,GAAI/B,EAAeK,QAAUyB,EAAmB,CAC9C,IAAME,EAAwE,oBAAzClC,EAAWO,QAAQ4B,kBACtDnC,EAAWO,QAAQ4B,kBAAkBjC,EAAeK,SACpDP,EAAWO,QAAQ4B,kBAErBC,EAAmB1K,OAAO2K,YAAW,WACnCnC,EAAeK,UACfN,GACF,GAAwB,OAArBiC,QAAqB,IAArBA,EAAAA,EAAyB1C,EAAA8C,8B,MAE5BtC,EAAWO,QAAQgC,iBAAmBvC,EAAWO,QAAQgC,gBAAgBP,GACzEQ,QAAQC,KAAK,6BAAAC,OAA6BV,EAAiB,a,CAGjE,EAEO,WAAM,OAAAI,GAAoB1K,OAAOiL,aAAaP,EAAxC,GAvBb,IAAIA,CAwBN,CA4E2BQ,CACvB9C,EACAE,EACAM,EACAL,EACAC,GAGFE,EAlFuB,SACvBN,EACAE,EACAM,EACAL,EACAC,GAEA,IAAIkC,EAiCJ,OA/BAtC,EAAkB+C,QAAU,SAACC,G,MAc3B,GAbA9C,EAAWO,QAAQwC,SAAW/C,EAAWO,QAAQwC,QAAQD,GACrDtD,EAAAiC,wBAA0B3B,aAA6B4B,cACzD1B,EAAWO,QAAQuB,SAAW9B,EAAWO,QAAQuB,QAAOkB,EAAAA,EAAC,CAAC,EACrDF,GAAK,CACRG,KAAM,KACNC,OAAQ,2CAAAR,OAA2CI,GACnDK,UAAU,KAGZ7C,EAAcd,EAAAnG,WAAWK,QACzBoG,EAAkBsD,SAGhBpD,EAAWO,QAAQ8C,aACrB,GAAInD,EAAeK,SAA+C,QAApCU,EAAAjB,EAAWO,QAAQyB,yBAAiB,IAAAf,EAAAA,EAAIzB,EAAAyC,yBAA0B,CAC9F,IAAMC,EAAwE,oBAAzClC,EAAWO,QAAQ4B,kBACtDnC,EAAWO,QAAQ4B,kBAAkBjC,EAAeK,SACpDP,EAAWO,QAAQ4B,kBAErBC,EAAmB1K,OAAO2K,YAAW,WACnCnC,EAAeK,UACfN,GACF,GAAwB,OAArBiC,QAAqB,IAArBA,EAAAA,EAAyB1C,EAAA8C,8B,MAE5BtC,EAAWO,QAAQgC,iBAAmBvC,EAAWO,QAAQgC,gBAAgBvC,EAAWO,QAAQyB,mBAC5FQ,QAAQC,KAAK,6BAAAC,OAA6B1C,EAAWO,QAAQyB,kBAAiB,aAGpF,EAEO,WAAM,OAAAI,GAAoB1K,OAAOiL,aAAaP,EAAxC,CACf,CAyC2BkB,CACvBxD,EACAE,EACAM,EACAL,EACAC,GAGK,WACLI,EAAcd,EAAAnG,WAAWkK,SACzBpD,IACAC,IACAN,EAAkBsD,QACdjK,GAAUqK,cAAcrK,EAC9B,CACF,C,iVCpMA,IAAAsK,EAAAtE,EAAA,OACAK,EAAAL,EAAA,MACAuE,EAAAvE,EAAA,MAGAQ,EAAAR,EAAA,OACAS,EAAAT,EAAA,OA0HaU,EAAAA,sBAAwB,SACnCC,EACAtI,EACAwI,EACAnH,GAEA,IAAIM,EAWJ,OATI6G,EAAWO,QAAQC,eACrBrH,GAAW,EAAAwG,EAAAc,mBAAkB5H,IAjIN,SACzBiH,EACAtI,EACAoJ,GAEA,IAAI+C,EAEA/C,GAAoBd,aAA6Ba,YACnDgD,GAAc,EAAA/D,EAAA3G,WAAU6G,EAA+C,mBAArBc,OAAiCC,EAAYD,IAGjGd,EAAkBgB,UAAY,SAAC5H,GAClB,OAAXyK,QAAW,IAAXA,GAAAA,KACA,EAAAD,EAAAE,gBAAepM,GAAKqM,SAAQ,SAAAC,GACtBA,EAAW9D,WAAWO,QAAQQ,WAChC+C,EAAW9D,WAAWO,QAAQQ,UAAU7H,GAIQ,oBAAzC4K,EAAW9D,WAAWO,QAAQS,SACa,IAAlD8C,EAAW9D,WAAWO,QAAQS,OAAO9H,IAMrC0H,GAC4B,mBAArBA,IACS,OAAhBA,QAAgB,IAAhBA,OAAgB,EAAhBA,EAAkBM,iBAAkBhI,EAAQiI,MAI9C2C,EAAWzD,eAAenH,EAC5B,GACF,CACF,CAiGEkI,CAAmBtB,EAAmBtI,EAAKwI,EAAWO,QAAQtH,WA/EvC,SACvB6G,EACAtI,GAEIsI,aAA6Ba,YAC/Bb,EAAkB+B,QAAU,SAACP,IAC3B,EAAAoC,EAAAE,gBAAepM,GAAKqM,SAAQ,SAAAC,GACtBA,EAAW9D,WAAWO,QAAQuB,SAChCgC,EAAW9D,WAAWO,QAAQuB,QAAQR,GAGxCwC,EAAWxD,cAAcd,EAAAnG,WAAWK,OACtC,WAEO+J,EAAAM,iBAAiBvM,IAExB,EAAAkM,EAAAE,gBAAepM,GAAKqM,SAAQ,SAAAC,G,MAC1B,GACEA,EAAW9D,WAAWO,QAAQwB,iBAC9B+B,EAAW9D,WAAWO,QAAQwB,gBAAgBT,GAC9C,CACA,IAAMU,EAAmE,QAA/Cf,EAAA6C,EAAW9D,WAAWO,QAAQyB,yBAAiB,IAAAf,EAAAA,EAAIzB,EAAAyC,wBAC7E,GAAI6B,EAAW5D,eAAeK,QAAUyB,EAAmB,CACzD,IAAME,EAAmF,oBAApD4B,EAAW9D,WAAWO,QAAQ4B,kBACjE2B,EAAW9D,WAAWO,QAAQ4B,kBAAkB2B,EAAW5D,eAAeK,SAC1EuD,EAAW9D,WAAWO,QAAQ4B,kBAEhCE,YAAW,WACTyB,EAAW5D,eAAeK,UAC1BuD,EAAW7D,UAAUM,SACvB,GAAwB,OAArB2B,QAAqB,IAArBA,EAAAA,EAAyB1C,EAAA8C,8B,MAE5BwB,EAAW9D,WAAWO,QAAQgC,iBAAmBuB,EAAW9D,WAAWO,QAAQgC,gBAAgBuB,EAAW9D,WAAWO,QAAQyB,mBAC7HQ,QAAQC,KAAK,6BAAAC,OAA6BV,EAAiB,a,CAGjE,GACF,EAEJ,CAyCEY,CAAiB9C,EAAmBtI,GAhGd,SACtBsI,EACAtI,GAEAsI,EAAkBuB,OAAS,SAACC,IAC1B,EAAAoC,EAAAE,gBAAepM,GAAKqM,SAAQ,SAAAC,GAC1BA,EAAW5D,eAAeK,QAAU,EAChCuD,EAAW9D,WAAWO,QAAQgB,QAChCuC,EAAW9D,WAAWO,QAAQgB,OAAOD,GAGvCwC,EAAWxD,cAAcd,EAAAnG,WAAWG,KACtC,GACF,CACF,CAmFEgI,CAAgB1B,EAAmBtI,GAxCZ,SACvBsI,EACAtI,GAEAsI,EAAkB+C,QAAU,SAACC,IAC3B,EAAAY,EAAAE,gBAAepM,GAAKqM,SAAQ,SAAAC,GACtBA,EAAW9D,WAAWO,QAAQwC,SAChCe,EAAW9D,WAAWO,QAAQwC,QAAQD,GAEpCtD,EAAAiC,wBAA0B3B,aAA6B4B,cACzDoC,EAAW9D,WAAWO,QAAQuB,SAAWgC,EAAW9D,WAAWO,QAAQuB,QAAOkB,EAAAA,EAAC,CAAC,EAC3EF,GAAK,CACRG,KAAM,KACNC,OAAQ,2CAAAR,OAA2CI,GACnDK,UAAU,KAGZW,EAAWxD,cAAcd,EAAAnG,WAAWK,QAExC,IACI8F,EAAAiC,wBAA0B3B,aAA6B4B,aACzD5B,EAAkBsD,OAEtB,CACF,CAiBEE,CAAiBxD,EAAmBtI,GAE7B,WACD2B,GAAUqK,cAAcrK,EAC9B,CACF,C,6WC/Ia0G,EAAAA,gBAAkB,CAAC,EACnBA,EAAAA,qBAAiD,CAAC,EAClDA,EAAAA,6BAAmD,CAC9DmE,iBAAiB,EACjBC,OAAQpE,EAAAqE,sBAEGrE,EAAAA,wBAA0B,KAC1BA,EAAAA,eAAiB,wCACjBA,EAAAA,oBAAsB,IACtBA,EAAAA,wBAA0B,GAC1BA,EAAAA,8BAAgC,IAChCA,EAAAA,uBAAyB,CAAC,EAC1BA,EAAAA,kBAAoB,CAC/B3G,QAAS,OACTE,QAAS,IACTD,SAAU,MAGZ,SAAYE,GACVA,EAAAA,EAAA,oCACAA,EAAAA,EAAA,2BACAA,EAAAA,EAAA,eACAA,EAAAA,EAAA,qBACAA,EAAAA,EAAA,kBACD,CAND,CAAYwG,EAAAxG,aAAAwG,EAAAA,WAAU,KAgBTA,EAAAA,cAAqC,qBAAdsE,WAAmD,gBAAtBA,UAAUC,QAC9DvE,EAAAA,wBAA0BA,EAAAwE,eATV,WAC3B,IACE,MAAO,gBAAiBC,U,CACxB,MAAO/G,GACP,OAAO,C,CAEX,CAGwDgH,E,+FCvCxD,IAAAd,EAAAtE,EAAA,OAEAK,EAAAL,EAAA,MACAqF,EAAArF,EAAA,OACAsF,EAAAtF,EAAA,OACAuE,EAAAvE,EAAA,MAmCaU,EAAAA,mBAAqB,SAChC6E,EACAlN,EACA8I,EACAN,EACAK,EACAsE,EACAzE,EACArH,GAEA,IAAK2G,EAAAiC,wBAA0BzB,EAAWO,QAAQqE,mBAChD,MAAIpF,EAAA6E,cACI,IAAIQ,MAAM,+CAEV,IAAIA,MAAM,gCAIpB,GAAI7E,EAAWO,QAAQuE,MAAO,CAC5B,IAAIC,EAAmD,UACzBlE,IAA1B4C,EAAAM,iBAAiBvM,IACnBiM,EAAAM,iBAAiBvM,GAAOwI,EAAWO,QAAQqE,mBACzC,IAAIlD,YAAYlK,EAAKwI,EAAWO,QAAQqE,oBACxC,IAAIjE,UAAUnJ,EAAKwI,EAAWO,QAAQyE,WACxCN,EAAanE,QAAUkD,EAAAM,iBAAiBvM,GACxC8I,EAAcd,EAAAnG,WAAWC,YACzByL,GAA4B,EAAAN,EAAAQ,uBAC1BxB,EAAAM,iBAAiBvM,GACjBA,EACAwI,EACAnH,KAGF6L,EAAanE,QAAUkD,EAAAM,iBAAiBvM,GACxC8I,EAAcmD,EAAAM,iBAAiBvM,GAAKuB,aAGtC,IAAM+K,EAAyB,CAC7BzD,eAAcA,EACdC,cAAaA,EACbN,WAAUA,EACVE,eAAcA,EACdD,UAAW0E,GAKb,OAFA,EAAAjB,EAAAwB,eAAc1N,EAAKsM,GA5EE,SACvBtM,EACAsM,EACA9D,EACAM,EACAyE,GAEA,OAAO,WAEL,IADA,EAAArB,EAAAyB,kBAAiB3N,EAAKsM,KACjB,EAAAJ,EAAA0B,gBAAe5N,GAAM,CACxB,IACE,IAAM6N,EAAa5B,EAAAM,iBAAiBvM,GAChC6N,aAAsB1E,YACxB0E,EAAWxD,QAAU,SAACP,GAChBtB,EAAWO,QAAQuB,SACrB9B,EAAWO,QAAQuB,QAAQR,GAE7BhB,EAAcd,EAAAnG,WAAWK,OAC3B,GAEF2L,EAAWjC,O,CACX,MAAO7F,GAAI,CAGTwH,GAA2BA,WAExBtB,EAAAM,iBAAiBvM,E,CAE5B,CACF,CAiDW8N,CACL9N,EACAsM,EACA9D,EACAM,EACAyE,E,CAOF,GAJAL,EAAanE,QAAUP,EAAWO,QAAQqE,mBACxC,IAAIlD,YAAYlK,EAAKwI,EAAWO,QAAQqE,oBACxC,IAAIjE,UAAUnJ,EAAKwI,EAAWO,QAAQyE,WACxC1E,EAAcd,EAAAnG,WAAWC,aACpBoL,EAAanE,QAChB,MAAM,IAAIsE,MAAM,kCAGlB,OAAO,EAAAL,EAAAe,iBACLb,EAAanE,QACb,CACEF,eAAcA,EACdC,cAAaA,GAEfN,EACA2E,EAASpE,QACTL,EACArH,EAGN,C,y9CCnHA,IAAA8G,EAAAR,EAAA,OAEAK,EAAAL,EAAA,MAIaU,EAAAA,OAAS,SACpBrI,EACAwI,EACAwF,G,YAAA,IAAAA,IAAAA,EAAA,G,0GAImB,oBAARhO,EAAP,a,iBAEe,O,sBAAA,GAAMA,K,cAArBiO,EAAeC,EAAAC,O,6BAGb3F,EAAWO,QAAQ8C,cAEbuC,EAAqD,QAApC3E,EAAAjB,EAAWO,QAAQyB,yBAAiB,IAAAf,EAAAA,EAAIzB,EAAAyC,wBAC3DuD,EAAkBI,GACZ1D,EAAwE,oBAAzClC,EAAWO,QAAQ4B,kBACtDnC,EAAWO,QAAQ4B,kBAAkBqD,GACrCxF,EAAWO,QAAQ4B,kBAErB,IAtBK0D,EAsB8B,OAArB3D,QAAqB,IAArBA,EAAAA,EAAyB1C,EAAA8C,8BAtBb,IAAIwD,SAAQ,SAAAC,GAAW,OAAArO,OAAO2K,WAAW0D,EAASF,EAA3B,OAiBjD,OAHJ,M,OASI,OADAH,EAAAC,OACO,CAAP,GAAO,EAAA9F,EAAAmG,QAAOxO,EAAKwI,EAAYwF,EAAkB,I,OAGjD,OADkC,QAAlCS,GAAAC,EAAAlG,EAAWO,SAAQgC,uBAAe,IAAA0D,GAAAA,EAAAE,KAAAD,EAAGV,GAC9B,CAAP,EAAO,M,0BAGX,MAAO,CAAP,EAAO,M,+CAIXC,EAAejO,E,mBAcjB,OAXM4O,EAAYpG,EAAWO,QAAQC,cACnC,EAAAb,EAAA0G,kBAAiBZ,GACjBA,EASK,CAAP,EAP8BzF,EAAWO,QAAQ+F,aAC/C,EAAA3G,EAAA4G,mBACEH,EACApG,EAAWO,QAAQ+F,aAErBF,GA7CY,IAACP,C,oHCCJhG,EAAAA,iBAAqC,CAAC,EAEtCA,EAAAA,gBAAkB,SAACrI,GAC9B,GAAIA,GAAOqI,EAAAkE,iBAAiByC,eAAehP,UAClCqI,EAAAkE,iBAAiBvM,QAExB,IAAK,IAAIiP,KAAO5G,EAAAkE,iBACVlE,EAAAkE,iBAAiByC,eAAeC,WAC3B5G,EAAAkE,iBAAiB0C,EAIhC,C,sFClBA,IAAAjH,EAAAL,EAAA,MAGAU,EAAAA,UAAA,SAA0B6G,EAAeC,GACjC,IAAA1F,EAIF0F,GAAW,CAAC,EAHdT,EAAAjF,EAAA9H,SAAAA,OAAQ,IAAA+M,EAAG1G,EAAAoH,kBAAkBzN,SAAQ+M,EACrCD,EAAAhF,EAAA7H,QAAAA,OAAO,IAAA6M,EAAGzG,EAAAoH,kBAAkBxN,QAAO6M,EACnCP,EAAAzE,EAAA/H,QAAAA,OAAO,IAAAwM,EAAGlG,EAAAoH,kBAAkB1N,QAAOwM,EAGjCmB,GAAkB,EAEhBC,EAAYC,aAAY,WAC5B,IACyB,oBAAZ7N,EACTwN,EAAGM,KAAK9N,KAERwN,EAAGM,KAAK9N,E,CAEV,MAAO4J,GACP,CAEJ,GAAG3J,GAEG8N,EAAeF,aAAY,WAC1BF,EAGHA,GAAkB,EAFlBH,EAAGtD,OAIP,GAAGhK,GAOH,OALAsN,EAAGQ,iBAAiB,SAAS,WAC3B1D,cAAcsD,GACdtD,cAAcyD,EAChB,IAEO,WACLJ,GAAkB,CACpB,CACF,C,+JClCA,IAAMM,EAA2B,CAAC,EAC5BC,EAA2B,GAEpBvH,EAAAA,eAAiB,SAACrI,GAC3B,OAAI,EAAAqI,EAAAuF,gBAAe5N,GACR6P,MAAMC,KAAKH,EAAY3P,IAE3B4P,CACX,EAEavH,EAAAA,eAAiB,SAACrI,G,MAC3B,OAAuB,QAAhByJ,EAAAkG,EAAY3P,UAAI,IAAAyJ,OAAA,EAAAA,EAAEsG,MAAO,CACpC,EAEa1H,EAAAA,cAAgB,SAACrI,EAAasM,GACvCqD,EAAY3P,GAAO2P,EAAY3P,IAAQ,IAAIgQ,IAC3CL,EAAY3P,GAAKiQ,IAAI3D,EACzB,EAEajE,EAAAA,iBAAmB,SAACrI,EAAasM,GAC1CqD,EAAY3P,GAAKkQ,OAAO5D,EAC5B,EAEajE,EAAAA,iBAAmB,SAACrI,GAC7B,GAAIA,GAAO2P,EAAYX,eAAehP,UAC3B2P,EAAY3P,QAEnB,IAAK,IAAIiP,KAAOU,EACRA,EAAYX,eAAeC,WACpBU,EAAYV,EAInC,C,2FC7Ba5G,EAAAA,iBAAmB,SAC9B8H,EACAC,GAGA,OAAO,IAAIC,MAAiBF,EAAW,CACrCrI,IAAK,SAACwI,EAAK9N,GACT,IAAM+N,EAAMD,EAAI9N,GAChB,MAAqB,cAAhBA,EAAoC4N,EACtB,oBAARG,GACTvF,QAAQM,MAAM,iIAGP,WAAO,GAEPiF,CAEX,EACAC,IAAK,SAAoCF,EAAgB9N,EAAQ+N,GAC/D,MAAI,MAAME,KAAKjO,IACbwI,QAAQC,KAAK,0GACN,IAEPqF,EAAI9N,GAAO+N,GACJ,EAEX,GAEJ,EAEAlI,EAAAA,QAAeA,EAAAqI,gB,qICxCf,IAAA1I,EAAAL,EAAA,MAGaU,EAAAA,iBAAmB,SAACrI,GAC/B,GAAIA,EAAK,CACP,IAAM2Q,EAAW,aAAaF,KAAKzQ,GAE7B4Q,EADmB5Q,EAAI6Q,QAAQ,yBAA0B,IAChBA,QAAQ,MAAO,IAG9D,MAAO,GAAA3F,OAFD3K,EAAWoQ,EAAW,MAAQ,KAElB,OAAAzF,OAAM0F,GAAqB1F,OAAGlD,EAAA8I,e,CAC3C,GAAY,KAAR9Q,EAAY,CACrB,IACMO,GADAoQ,EAAW,SAASF,KAAKvQ,OAAOC,SAASI,WACnB,MAAQ,KAC9BC,EAAON,OAAOC,SAASK,KAAO,IAAA0K,OAAIhL,OAAOC,SAASK,MAAS,GAEjE,MAAO,GAAA0K,OAAG3K,EAAQ,OAAA2K,OAAMhL,OAAOC,SAASc,UAAQiK,OAAG1K,GAAI0K,OAAGlD,EAAA8I,e,CAG5D,OAAO9Q,CACT,EAEaqI,EAAAA,kBAAoB,SAACrI,EAAa+Q,QAAA,IAAAA,IAAAA,EAAA,IAC7C,IACMC,EADiB,kBACiBP,KAAKzQ,GAEvCiR,EAAc,GAAA/F,OAAGtD,OAAOsJ,QAAQH,GAAQI,QAAO,SAACC,EAAM3H,G,IAACjH,EAAGiH,EAAA,GAAE3E,EAAK2E,EAAA,GACrE,OAAO2H,EAAO,GAAAlG,OAAG1I,EAAG,KAAA0I,OAAIpG,EAAK,IAC/B,GAAG,IAAIuM,MAAM,GAAI,IAEjB,MAAO,GAAAnG,OAAGlL,GAAGkL,OAAG8F,EAAmB,IAAM,KAAG9F,OAAG+F,EACjD,EAEa5I,EAAAA,kBAAoB,SAAChH,EAA0BM,QAAA,IAAAA,IAAAA,EAAWqG,EAAAsJ,yBAGrE,OAAOpR,OAAOqP,aAFD,WAAM,OAAAlO,EAAY2G,EAAAuJ,oBAAZ,GAEa5P,EAClC,C,0qBCrCA,IAAA6P,EAAA7J,EAAA,OACAD,EAAAC,EAAA,MACAK,EAAAL,EAAA,MAGaU,EAAAA,eAAiB,SAC5BrI,EACAyJ,EACAgI,QADA,IAAAhI,IAAAA,EAA8DzB,EAAA0J,8BAA5D,IAAAlF,EAAe/C,EAAA+C,gBAAEC,EAAMhD,EAAAgD,OAAK0C,EAAOwC,EAAAlI,EAArC,mCACA,IAAAgI,IAAAA,GAAA,GAEA,IAAMG,EAAsBpG,EAAAA,EAAA,GACrB2D,GAAO,CACV/B,mBAAoB,CAClBZ,gBAAeA,KAGfqF,GAAY,EAAAL,EAAAM,QAAiC9J,EAAA0E,sBAC/CD,IACFoF,EAAU9I,QAAU0D,GAGhB,IAAAiC,GAIF,EAAAhH,EAAAlG,cACFxB,EACA4R,EACAH,GANAM,EAAWrD,EAAAqD,YACXxQ,EAAUmN,EAAAnN,WACVyQ,EAAYtD,EAAAsD,aAiBd,OAVA,EAAAR,EAAAzR,YAAU,YACO,OAAXgS,QAAW,IAAXA,OAAW,EAAXA,EAAa3L,OACbwB,OAAOsJ,QAAQW,EAAU9I,SAASsD,SAAQ,SAAC5C,G,IAACrD,EAAIqD,EAAA,GAAEwI,EAAOxI,EAAA,GACjDrD,IAAS2L,EAAY3L,MACrB6L,EAAQF,EAEhB,GAEN,GAAG,CAACA,IAEG,CACLG,UAAWH,EACXxQ,WAAUA,EACV4Q,eAAgBH,EAEpB,C,uUC9CA,IAAAR,EAAA7J,EAAA,OACAD,EAAAC,EAAA,MACAK,EAAAL,EAAA,MAQMyK,EAAwC,CAC5ChM,KAAM,QACNiM,QAAS,MA0BEhK,EAAAA,YAAc,SACzBrI,EACAmP,EACAsC,QADA,IAAAtC,IAAAA,EAAmBnH,EAAAsK,sBACnB,IAAAb,IAAAA,GAAA,GAEA,IAAMc,GAAsB,EAAAf,EAAAgB,UAAQ,WAAM,OAAAhH,EAAAA,EAAC,CAAC,EACvC2D,GAAO,CACVnG,cAAc,GAF0B,GAGtC,IAEES,GAMF,EAAA/B,EAAAlG,cAEFxB,EACAuS,EACAd,GATApQ,EAAWoI,EAAApI,YACXoR,EAAehJ,EAAAgJ,gBACfV,EAAWtI,EAAAsI,YACXxQ,EAAUkI,EAAAlI,WACVyQ,EAAYvI,EAAAuI,aAQRU,GAAsB,EAAAlB,EAAAgB,UAAQ,WAClC,OA/CkB,SAAc1I,GAClC,IAAKA,IAAUA,EAAMH,KACnB,OAAOyI,EAGT,IAAMO,EAAQ7I,EAAMH,KAAKgJ,MAAM,SAE/B,IAAKA,EACH,OAAOP,EAGT,IAAMzI,EAAOiJ,KAAKC,MAAMF,GAExB,OAAK9C,MAAMiD,QAAQnJ,IAAUA,EAAK,GAI3B,CACLvD,KAAMuD,EAAK,GACX0I,QAAS1I,EAAK,IALPyI,CAOX,CA0BIW,CAAiBhB,EAAjB,GAA+B,CAACA,IAElC,MAAO,CACL1Q,YAAWA,EACXoR,gBAAeA,EACfV,YAAaW,EACbpR,gBAAiBoR,EACjBnR,WAAUA,EACVyQ,aAAYA,EAEhB,C,mxDCxEA,IAAAR,EAAA7J,EAAA,OACAqL,EAAArL,EAAA,OACAK,EAAAL,EAAA,MACAsL,EAAAtL,EAAA,OACAuL,EAAAvL,EAAA,OACAwL,EAAAC,EAAAzL,EAAA,QAUAO,EAAAP,EAAA,OAEaU,EAAAA,aAAe,SAC1BrI,EACAmP,EACAsC,QADA,IAAAtC,IAAAA,EAAmBnH,EAAAsK,sBACnB,IAAAb,IAAAA,GAAA,GAEM,IAAAhI,GAAgC,EAAA+H,EAAApT,UAA8C,MAA7E2T,EAAWtI,EAAA,GAAEZ,EAAcY,EAAA,GAC5BiF,GAA8B,EAAA8C,EAAApT,UAA0B,CAAC,GAAxDmD,EAAUmN,EAAA,GAAE5F,EAAa4F,EAAA,GAC1BpN,GAAqB,EAAAkQ,EAAAgB,UAAQ,WACjC,GAAIT,EACF,IACE,OAAOa,KAAKC,MAAMd,EAAYpI,K,CAC9B,MAAO5D,GACP,OAAOiC,EAAAqL,sB,CAGX,OAAO,IACT,GAAE,CAACtB,IACG9D,GAAe,EAAAuD,EAAAM,QAAsB,MACrC5E,GAAe,EAAAsE,EAAAM,QAA6B,MAC5C3E,GAAW,EAAAqE,EAAAM,SAAmB,WAAM,IACpCpJ,GAAiB,EAAA8I,EAAAM,QAAe,GAChCwB,GAAe,EAAA9B,EAAAM,QAA2B,IAC1CyB,GAAiB,EAAA/B,EAAAM,QAA6B,MAC9C0B,GAAe,EAAAhC,EAAAM,QAAgB3C,GACrCqE,EAAazK,QAAUoG,EAEvB,IAAMsE,EACJxF,EAAalF,cAAgDM,IAArC9H,EAAW0M,EAAalF,SAC9CxH,EAAW0M,EAAalF,SAChB,OAAR/I,IAA4B,IAAZyR,EACdzJ,EAAAnG,WAAWC,WACXkG,EAAAnG,WAAW6R,eAEXC,EAAyBxE,EAAQL,YAAc8D,KAAKgB,UAAUzE,EAAQL,aAAe,KAErFzN,GAA2B,EAAAmQ,EAAAqC,cAAY,SAACnS,EAASoS,G,WAAA,IAAAA,IAAAA,GAAA,GACjD9L,EAAAiC,wBAA0BiD,EAAanE,mBAAmBmB,YAC5Dc,QAAQC,KAAK,iDAIS,QAApBxB,EAAAyD,EAAanE,eAAO,IAAAU,OAAA,EAAAA,EAAElI,cAAeyG,EAAAnG,WAAWG,OAClD,EAAAkG,EAAAiC,mBAAkB+C,EAAanE,QAASyK,EAAazK,QAAQqB,YAC7D8C,EAAanE,QAAQyG,KAAK9N,IACjBoS,GACTR,EAAavK,QAAQpI,KAAKe,EAE9B,GAAG,IAEG+Q,GAAmC,EAAAjB,EAAAqC,cAAY,SAACnS,EAASoS,QAAA,IAAAA,IAAAA,GAAA,GAC7DzS,EAAYuR,KAAKgB,UAAUlS,GAAUoS,EACvC,GAAG,CAACzS,IAEE2Q,GAAe,EAAAR,EAAAqC,cAAY,WAC/B,OAAmC,IAA/BL,EAAazK,QAAQuE,OAAmBtF,EAAAiC,wBAA0BiD,EAAanE,mBAAmBmB,YAC7FgD,EAAanE,SAGS,OAA3BwK,EAAexK,SAAoBmE,EAAanE,WAClD,EAAAb,EAAAiC,mBAAkB+C,EAAanE,QAASyK,EAAazK,QAAQqB,YAC7DmJ,EAAexK,SAAU,EAAAoK,EAAAY,SAAiB7G,EAAanE,QAASoE,IAG3DoG,EAAexK,QACxB,GAAG,IAoFH,OAlFA,EAAAyI,EAAAzR,YAAU,WACR,GAAY,OAARC,IAA4B,IAAZyR,EAAkB,CACpC,IAAIuC,EACAC,GAAc,EACdC,GAAe,EAEbC,EAAQ,kBAAAC,OAAA,4B,4DACW,OAAvB3K,EAAAwE,EAAuB,IAAM,EAAAiF,EAAA1E,QAAOxO,EAAKwT,I,OAEzC,OAFA/J,EAAaV,QAAU2F,EAAAP,OAEM,OAAzBF,EAAalF,SACfiC,QAAQM,MAAM,4DACd2C,EAAalF,QAAU,WACvB,EAAAiK,EAAAqB,YAAU,WAAM,OAAAvL,GAAc,SAAAwL,GAAQ,OAAA9I,EAAAA,EAAC,CAAC,EACnC8I,GAAI,CACPC,QAASvM,EAAAnG,WAAWK,QAFgB,GAAtB,IAKhB,MAGIsS,EAA0B,SAAC9S,GAC1BuS,IACH,EAAAjB,EAAAqB,YAAU,WAAM,OAAAxL,EAAenH,EAAf,GAEpB,EAEM+S,EAAyB,SAAC1W,GACzBkW,IACH,EAAAjB,EAAAqB,YAAU,WAAM,OAAAvL,GAAc,SAAAwL,G,MAAQ,OAAA9I,EAAAA,EAAC,CAAC,EACnC8I,GACCrG,EAAalF,WAAOU,EAAA,IAAMwE,EAAalF,SAAUhL,EAAK0L,GAFtB,GAAtB,GAKpB,EAEGyK,IACDF,GAAkB,EAAAf,EAAAyB,oBAChBxH,EACAe,EAAalF,QACb0L,EACAjB,EACAgB,EACArH,EACAzE,EACArH,I,aAcN,OATA8L,EAASpE,QAAU,WACZkL,IACCV,EAAexK,UAASwK,EAAexK,QAAU,MACtC,OAAfiL,QAAe,IAAfA,GAAAA,IACAG,IAEJ,EAEAA,IACO,WACLF,GAAc,EACdC,GAAe,EACXX,EAAexK,UAASwK,EAAexK,QAAU,MACtC,OAAfiL,QAAe,IAAfA,GAAAA,IACAnL,EAAe,KACjB,C,CACiB,OAAR7I,IAA4B,IAAZyR,IACzB/I,EAAeK,QAAU,EACzBD,GAAc,SAAAwL,G,MAAQ,OAAA9I,EAAAA,EAAC,CAAC,EACnB8I,GACCrG,EAAalF,WAAOU,EAAA,IAAMwE,EAAalF,SAAUf,EAAAnG,WAAWK,OAAMuH,GAFlD,IAK1B,GAAG,CAACzJ,EAAKyR,EAASkC,EAAwBtS,KAE1C,EAAAmQ,EAAAzR,YAAU,WACJ0T,IAAsBzL,EAAAnG,WAAWG,MACnCsR,EAAavK,QAAQ4L,OAAO,GAAGtI,SAAQ,SAAA3K,GACrCL,EAAYK,EACd,GAEJ,GAAG,CAAC+R,IAEG,CACLpS,YAAWA,EACXoR,gBAAeA,EACfV,YAAWA,EACXzQ,gBAAeA,EACfC,WAAYkS,EACZzB,aAAYA,EAEhB,C,iHC5KA,IAAA/F,EAAAtE,EAAA,OACAuE,EAAAvE,EAAA,MAEAU,EAAAA,kBAAA,SACIC,EACAsM,GAEA,IAAKA,GAAQtM,aAA6Ba,aAAc,EAAO,MAAM,IAAIkE,MAAM,GACnF,EAGAhF,EAAAA,iBAAA,SAAkCrI,IAC9B,EAAAkM,EAAA2I,kBAAiB7U,IACjB,EAAAiM,EAAA6I,iBAAgB9U,EACpB,C","sources":["screens/Console/Trace/Trace.tsx","../node_modules/react-use-websocket/src/index.ts","../node_modules/react-use-websocket/src/lib/attach-listener.ts","../node_modules/react-use-websocket/src/lib/attach-shared-listeners.ts","../node_modules/react-use-websocket/src/lib/constants.ts","../node_modules/react-use-websocket/src/lib/create-or-join.ts","../node_modules/react-use-websocket/src/lib/get-url.ts","../node_modules/react-use-websocket/src/lib/globals.ts","../node_modules/react-use-websocket/src/lib/heartbeat.ts","../node_modules/react-use-websocket/src/lib/manage-subscribers.ts","../node_modules/react-use-websocket/src/lib/proxy.ts","../node_modules/react-use-websocket/src/lib/socket-io.ts","../node_modules/react-use-websocket/src/lib/use-event-source.ts","../node_modules/react-use-websocket/src/lib/use-socket-io.ts","../node_modules/react-use-websocket/src/lib/use-websocket.ts","../node_modules/react-use-websocket/src/lib/util.ts"],"sourcesContent":["// This file is part of MinIO Console Server\n// Copyright (c) 2021 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport { Fragment, useEffect, useState } from \"react\";\nimport { DateTime } from \"luxon\";\nimport { useSelector } from \"react-redux\";\nimport {\n  Box,\n  breakPoints,\n  Button,\n  Checkbox,\n  DataTable,\n  FilterIcon,\n  Grid,\n  InputBox,\n  PageLayout,\n} from \"mds\";\nimport { AppState, useAppDispatch } from \"../../../store\";\nimport { TraceMessage } from \"./types\";\nimport { niceBytes, timeFromDate } from \"../../../common/utils\";\nimport { wsProtocol } from \"../../../utils/wsUtils\";\nimport {\n  setTraceStarted,\n  traceMessageReceived,\n  traceResetMessages,\n} from \"./traceSlice\";\nimport { setHelpName } from \"../../../systemSlice\";\nimport TooltipWrapper from \"../Common/TooltipWrapper/TooltipWrapper\";\nimport PageHeaderWrapper from \"../Common/PageHeaderWrapper/PageHeaderWrapper\";\nimport HelpMenu from \"../HelpMenu\";\nimport useWebSocket, { ReadyState } from \"react-use-websocket\";\n\nconst Trace = () => {\n  const dispatch = useAppDispatch();\n\n  const messages = useSelector((state: AppState) => state.trace.messages);\n  const traceStarted = useSelector(\n    (state: AppState) => state.trace.traceStarted,\n  );\n\n  const [statusCode, setStatusCode] = useState<string>(\"\");\n  const [method, setMethod] = useState<string>(\"\");\n  const [func, setFunc] = useState<string>(\"\");\n  const [path, setPath] = useState<string>(\"\");\n  const [threshold, setThreshold] = useState<number>(0);\n  const [all, setAll] = useState<boolean>(false);\n  const [s3, setS3] = useState<boolean>(true);\n  const [internal, setInternal] = useState<boolean>(false);\n  const [storage, setStorage] = useState<boolean>(false);\n  const [os, setOS] = useState<boolean>(false);\n  const [errors, setErrors] = useState<boolean>(false);\n\n  const [toggleFilter, setToggleFilter] = useState<boolean>(false);\n  const [logActive, setLogActive] = useState(false);\n  const [wsUrl, setWsUrl] = useState<string>(\"\");\n\n  useEffect(() => {\n    const url = new URL(window.location.toString());\n    const wsProt = wsProtocol(url.protocol);\n    const port = process.env.NODE_ENV === \"development\" ? \"9090\" : url.port;\n    const calls = all\n      ? \"all\"\n      : (() => {\n          const c = [];\n          if (s3) c.push(\"s3\");\n          if (internal) c.push(\"internal\");\n          if (storage) c.push(\"storage\");\n          if (os) c.push(\"os\");\n          return c.join(\",\");\n        })();\n\n    // check if we are using base path, if not this always is `/`\n    const baseLocation = new URL(document.baseURI).pathname;\n\n    const wsUrl = new URL(\n      `${wsProt}://${url.hostname}:${port}${baseLocation}ws/trace`,\n    );\n    wsUrl.searchParams.append(\"calls\", calls);\n    wsUrl.searchParams.append(\"threshold\", threshold.toString());\n    wsUrl.searchParams.append(\"onlyErrors\", errors ? \"yes\" : \"no\");\n    wsUrl.searchParams.append(\"statusCode\", statusCode);\n    wsUrl.searchParams.append(\"method\", method);\n    wsUrl.searchParams.append(\"funcname\", func);\n    wsUrl.searchParams.append(\"path\", path);\n    setWsUrl(wsUrl.href);\n  }, [\n    all,\n    s3,\n    internal,\n    storage,\n    os,\n    threshold,\n    errors,\n    statusCode,\n    method,\n    func,\n    path,\n  ]);\n\n  const { sendMessage, lastJsonMessage, readyState } =\n    useWebSocket<TraceMessage>(\n      wsUrl,\n      {\n        heartbeat: {\n          message: \"ok\",\n          interval: 10 * 1000, // send ok every 10 seconds\n          timeout: 365 * 24 * 60 * 60 * 1000, // disconnect after 365 days (workaround, because heartbeat gets no response)\n        },\n      },\n      logActive,\n    );\n\n  useEffect(() => {\n    if (readyState === ReadyState.CONNECTING) {\n      dispatch(traceResetMessages());\n    } else if (readyState === ReadyState.OPEN) {\n      dispatch(setTraceStarted(true));\n    } else if (readyState === ReadyState.CLOSED) {\n      dispatch(setTraceStarted(false));\n    }\n  }, [readyState, dispatch, sendMessage]);\n\n  useEffect(() => {\n    if (lastJsonMessage) {\n      lastJsonMessage.ptime = DateTime.fromISO(lastJsonMessage.time).toJSDate();\n      lastJsonMessage.key = Math.random();\n      dispatch(traceMessageReceived(lastJsonMessage));\n    }\n  }, [lastJsonMessage, dispatch]);\n\n  useEffect(() => {\n    dispatch(setHelpName(\"trace\"));\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  return (\n    <Fragment>\n      <PageHeaderWrapper label={\"Trace\"} actions={<HelpMenu />} />\n\n      <PageLayout>\n        <Box withBorders>\n          <Grid container>\n            <Grid\n              item\n              xs={12}\n              sx={{\n                display: \"flex\",\n                flexFlow: \"column\",\n\n                \"& .trace-Checkbox-label\": {\n                  fontSize: \"14px\",\n                  fontWeight: \"normal\",\n                },\n              }}\n            >\n              <Box\n                sx={{\n                  fontSize: \"16px\",\n                  fontWeight: 600,\n                  padding: \"20px 0px 20px 0\",\n                }}\n              >\n                Calls to Trace\n              </Box>\n              <Box\n                className={`${traceStarted ? \"inactive-state\" : \"\"}`}\n                sx={{\n                  display: \"flex\",\n                  alignItems: \"center\",\n                  justifyContent: \"space-between\",\n                }}\n              >\n                <Box\n                  sx={{\n                    display: \"flex\",\n                    flexFlow: \"row\",\n                    \"& .trace-checked-icon\": {\n                      border: \"1px solid red\",\n                    },\n                    [`@media (min-width: ${breakPoints.md}px)`]: {\n                      gap: 30,\n                    },\n                  }}\n                >\n                  <Checkbox\n                    checked={all}\n                    id={\"all_calls\"}\n                    name={\"all_calls\"}\n                    label={\"All\"}\n                    onChange={() => setAll(!all)}\n                    value={\"all\"}\n                    disabled={traceStarted}\n                  />\n                  <Checkbox\n                    checked={s3 || all}\n                    id={\"s3_calls\"}\n                    name={\"s3_calls\"}\n                    label={\"S3\"}\n                    onChange={() => setS3(!s3)}\n                    value={\"s3\"}\n                    disabled={all || traceStarted}\n                  />\n                  <Checkbox\n                    checked={internal || all}\n                    id={\"internal_calls\"}\n                    name={\"internal_calls\"}\n                    label={\"Internal\"}\n                    onChange={() => setInternal(!internal)}\n                    value={\"internal\"}\n                    disabled={all || traceStarted}\n                  />\n                  <Checkbox\n                    checked={storage || all}\n                    id={\"storage_calls\"}\n                    name={\"storage_calls\"}\n                    label={\"Storage\"}\n                    onChange={() => setStorage(!storage)}\n                    value={\"storage\"}\n                    disabled={all || traceStarted}\n                  />\n                  <Checkbox\n                    checked={os || all}\n                    id={\"os_calls\"}\n                    name={\"os_calls\"}\n                    label={\"OS\"}\n                    onChange={() => setOS(!os)}\n                    value={\"os\"}\n                    disabled={all || traceStarted}\n                  />\n                </Box>\n                <Box\n                  sx={{\n                    display: \"flex\",\n                    alignItems: \"center\",\n                    justifyContent: \"space-between\",\n                    gap: \"15px\",\n                  }}\n                >\n                  <TooltipWrapper tooltip={\"More filter options\"}>\n                    <Button\n                      id={\"filter-toggle\"}\n                      onClick={() => setToggleFilter(!toggleFilter)}\n                      label={\"Filters\"}\n                      icon={<FilterIcon />}\n                      variant={\"regular\"}\n                      className={\"filters-toggle-button\"}\n                      style={{\n                        width: \"118px\",\n                        background: toggleFilter ? \"rgba(8, 28, 66, 0.04)\" : \"\",\n                      }}\n                    />\n                  </TooltipWrapper>\n\n                  {!traceStarted && (\n                    <Button\n                      id={\"start-trace\"}\n                      label={\"Start\"}\n                      data-test-id={\"trace-start-button\"}\n                      variant=\"callAction\"\n                      onClick={() => setLogActive(true)}\n                      style={{\n                        width: \"118px\",\n                      }}\n                    />\n                  )}\n                  {traceStarted && (\n                    <Button\n                      id={\"stop-trace\"}\n                      label={\"Stop Trace\"}\n                      data-test-id={\"trace-stop-button\"}\n                      variant=\"callAction\"\n                      onClick={() => setLogActive(false)}\n                      style={{\n                        width: \"118px\",\n                      }}\n                    />\n                  )}\n                </Box>\n              </Box>\n            </Grid>\n            {toggleFilter ? (\n              <Box\n                useBackground\n                className={`${traceStarted ? \"inactive-state\" : \"\"}`}\n                sx={{\n                  marginTop: \"25px\",\n                  display: \"flex\",\n                  flexFlow: \"column\",\n                  padding: \"30px\",\n                  width: \"100%\",\n\n                  \"& .orient-vertical\": {\n                    flexFlow: \"column\",\n                    \"& label\": {\n                      marginBottom: \"10px\",\n                      fontWeight: 600,\n                    },\n                    \"& .inputRebase\": {\n                      width: \"90%\",\n                    },\n                  },\n\n                  \"& .trace-Checkbox-label\": {\n                    fontSize: \"14px\",\n                    fontWeight: \"normal\",\n                  },\n                }}\n              >\n                <Box\n                  sx={{\n                    display: \"flex\",\n                  }}\n                >\n                  <InputBox\n                    className=\"orient-vertical\"\n                    id=\"trace-status-code\"\n                    name=\"trace-status-code\"\n                    label=\"Status Code\"\n                    placeholder=\"e.g. 503\"\n                    value={statusCode}\n                    onChange={(e) => setStatusCode(e.target.value)}\n                    disabled={traceStarted}\n                  />\n\n                  <InputBox\n                    className=\"orient-vertical\"\n                    id=\"trace-function-name\"\n                    name=\"trace-function-name\"\n                    label=\"Function Name\"\n                    placeholder=\"e.g. FunctionName2055\"\n                    value={func}\n                    onChange={(e) => setFunc(e.target.value)}\n                    disabled={traceStarted}\n                  />\n\n                  <InputBox\n                    className=\"orient-vertical\"\n                    id=\"trace-method\"\n                    name=\"trace-method\"\n                    label=\"Method\"\n                    placeholder=\"e.g. Method 2056\"\n                    value={method}\n                    onChange={(e) => setMethod(e.target.value)}\n                    disabled={traceStarted}\n                  />\n                </Box>\n                <Box\n                  sx={{\n                    gap: \"30px\",\n                    display: \"grid\",\n                    gridTemplateColumns: \"2fr 1fr\",\n                    width: \"100%\",\n                    marginTop: \"33px\",\n                  }}\n                >\n                  <Box\n                    sx={{\n                      flex: 2,\n                      width: \"calc( 100% + 10px)\",\n                    }}\n                  >\n                    <InputBox\n                      className=\"orient-vertical\"\n                      id=\"trace-path\"\n                      name=\"trace-path\"\n                      label=\"Path\"\n                      placeholder=\"e.g. my-bucket/my-prefix/*\"\n                      value={path}\n                      onChange={(e) => setPath(e.target.value)}\n                      disabled={traceStarted}\n                    />\n                  </Box>\n                  <Box\n                    sx={{\n                      marginLeft: \"15px\",\n                    }}\n                  >\n                    <InputBox\n                      className=\"orient-vertical\"\n                      id=\"trace-fthreshold\"\n                      name=\"trace-fthreshold\"\n                      label=\"Response Threshold\"\n                      type=\"number\"\n                      placeholder=\"e.g. website.io.3249.114.12\"\n                      value={`${threshold}`}\n                      onChange={(e) => setThreshold(parseInt(e.target.value))}\n                      disabled={traceStarted}\n                    />\n                  </Box>\n                </Box>\n                <Box\n                  sx={{\n                    display: \"flex\",\n                    alignItems: \"center\",\n                    justifyContent: \"flex-start\",\n                    marginTop: \"40px\",\n                  }}\n                >\n                  <Checkbox\n                    checked={errors}\n                    id={\"only_errors\"}\n                    name={\"only_errors\"}\n                    label={\"Display only Errors\"}\n                    onChange={() => setErrors(!errors)}\n                    value={\"only_errors\"}\n                    disabled={traceStarted}\n                  />\n                </Box>\n              </Box>\n            ) : null}\n\n            <Grid item xs={12}>\n              <Box\n                sx={{\n                  fontSize: \"16px\",\n                  fontWeight: 600,\n                  marginBottom: \"30px\",\n                  marginTop: \"30px\",\n                }}\n              >\n                Trace Results\n              </Box>\n            </Grid>\n            <Grid item xs={12}>\n              <DataTable\n                columns={[\n                  {\n                    label: \"Time\",\n                    elementKey: \"ptime\",\n                    renderFunction: (time: Date) => {\n                      const timeParse = new Date(time);\n                      return timeFromDate(timeParse);\n                    },\n                    width: 100,\n                  },\n                  { label: \"Name\", elementKey: \"api\" },\n                  {\n                    label: \"Status\",\n                    elementKey: \"\",\n                    renderFunction: (fullElement: TraceMessage) =>\n                      `${fullElement.statusCode} ${fullElement.statusMsg}`,\n                    renderFullObject: true,\n                  },\n                  {\n                    label: \"Location\",\n                    elementKey: \"configuration_id\",\n                    renderFunction: (fullElement: TraceMessage) =>\n                      `${fullElement.host} ${fullElement.client}`,\n                    renderFullObject: true,\n                  },\n                  {\n                    label: \"Load Time\",\n                    elementKey: \"callStats.duration\",\n                    width: 150,\n                  },\n                  {\n                    label: \"Upload\",\n                    elementKey: \"callStats.rx\",\n                    renderFunction: niceBytes,\n                    width: 150,\n                  },\n                  {\n                    label: \"Download\",\n                    elementKey: \"callStats.tx\",\n                    renderFunction: niceBytes,\n                    width: 150,\n                  },\n                ]}\n                isLoading={false}\n                records={messages}\n                entityName=\"Traces\"\n                idField=\"api\"\n                customEmptyMessage={\n                  traceStarted\n                    ? \"No Traced elements received yet\"\n                    : \"Trace is not started yet\"\n                }\n                customPaperHeight={\"calc(100vh - 292px)\"}\n                autoScrollToBottom\n              />\n            </Grid>\n          </Grid>\n        </Box>\n      </PageLayout>\n    </Fragment>\n  );\n};\n\nexport default Trace;\n","export { useWebSocket as default } from './lib/use-websocket';\n\nexport { SendMessage, Options } from './lib/types';\n\nexport { useSocketIO } from './lib/use-socket-io';\n\nexport { ReadyState } from './lib/constants';\n\nexport { useEventSource } from './lib/use-event-source';\n\nexport { resetGlobalState } from './lib/util';\n","import { MutableRefObject } from 'react';\nimport { setUpSocketIOPing } from './socket-io';\nimport { heartbeat } from './heartbeat';\nimport {\n  DEFAULT_RECONNECT_LIMIT,\n  DEFAULT_RECONNECT_INTERVAL_MS,\n  ReadyState,\n  isEventSourceSupported,\n} from './constants';\nimport { Options, SendMessage, WebSocketLike } from './types';\nimport { assertIsWebSocket } from './util';\n\nexport interface Setters {\n  setLastMessage: (message: WebSocketEventMap['message']) => void;\n  setReadyState: (readyState: ReadyState) => void;\n}\n\nconst bindMessageHandler = (\n  webSocketInstance: WebSocketLike,\n  optionsRef: MutableRefObject<Options>,\n  setLastMessage: Setters['setLastMessage'],\n) => {\n  let heartbeatCb: () => void;\n\n  if (optionsRef.current.heartbeat && webSocketInstance instanceof WebSocket) {\n    const heartbeatOptions =\n      typeof optionsRef.current.heartbeat === \"boolean\"\n        ? undefined\n        : optionsRef.current.heartbeat;\n    heartbeatCb = heartbeat(webSocketInstance, heartbeatOptions);\n  }\n\n  webSocketInstance.onmessage = (message: WebSocketEventMap['message']) => {\n    heartbeatCb?.();\n    optionsRef.current.onMessage && optionsRef.current.onMessage(message);\n    if (typeof optionsRef.current.filter === 'function' && optionsRef.current.filter(message) !== true) {\n      return;\n    }\n    if (\n      optionsRef.current.heartbeat &&\n      typeof optionsRef.current.heartbeat !== \"boolean\" &&\n      optionsRef.current.heartbeat?.returnMessage === message.data\n    )\n      return;\n\n    setLastMessage(message);\n  };\n};\n\nconst bindOpenHandler = (\n  webSocketInstance: WebSocketLike,\n  optionsRef: MutableRefObject<Options>,\n  setReadyState: Setters['setReadyState'],\n  reconnectCount: MutableRefObject<number>,\n) => {\n  webSocketInstance.onopen = (event: WebSocketEventMap['open']) => {\n    optionsRef.current.onOpen && optionsRef.current.onOpen(event);\n    reconnectCount.current = 0;\n    setReadyState(ReadyState.OPEN);\n  };\n};\n\nconst bindCloseHandler = (\n  webSocketInstance: WebSocketLike,\n  optionsRef: MutableRefObject<Options>,\n  setReadyState: Setters['setReadyState'],\n  reconnect: () => void,\n  reconnectCount: MutableRefObject<number>,\n) => {\n  if (isEventSourceSupported && webSocketInstance instanceof EventSource) {\n    return () => {};\n  }\n  assertIsWebSocket(webSocketInstance, optionsRef.current.skipAssert);\n  let reconnectTimeout: number;\n\n  webSocketInstance.onclose = (event: WebSocketEventMap['close']) => {\n    optionsRef.current.onClose && optionsRef.current.onClose(event);\n    setReadyState(ReadyState.CLOSED);\n    if (optionsRef.current.shouldReconnect && optionsRef.current.shouldReconnect(event)) {\n      const reconnectAttempts = optionsRef.current.reconnectAttempts ?? DEFAULT_RECONNECT_LIMIT;\n      if (reconnectCount.current < reconnectAttempts) {\n        const nextReconnectInterval = typeof optionsRef.current.reconnectInterval === 'function' ?\n          optionsRef.current.reconnectInterval(reconnectCount.current) :\n          optionsRef.current.reconnectInterval;\n\n        reconnectTimeout = window.setTimeout(() => {\n          reconnectCount.current++;\n          reconnect();\n        }, nextReconnectInterval ?? DEFAULT_RECONNECT_INTERVAL_MS);\n      } else {\n        optionsRef.current.onReconnectStop && optionsRef.current.onReconnectStop(reconnectAttempts);\n        console.warn(`Max reconnect attempts of ${reconnectAttempts} exceeded`);\n      }\n    }\n  };\n\n  return () => reconnectTimeout && window.clearTimeout(reconnectTimeout);\n};\n\nconst bindErrorHandler = (\n  webSocketInstance: WebSocketLike,\n  optionsRef: MutableRefObject<Options>,\n  setReadyState: Setters['setReadyState'],\n  reconnect: () => void,\n  reconnectCount: MutableRefObject<number>,\n) => {\n  let reconnectTimeout: number;\n\n  webSocketInstance.onerror = (error: WebSocketEventMap['error']) => {\n    optionsRef.current.onError && optionsRef.current.onError(error);\n    if (isEventSourceSupported && webSocketInstance instanceof EventSource) {\n      optionsRef.current.onClose && optionsRef.current.onClose({\n        ...error,\n        code: 1006,\n        reason: `An error occurred with the EventSource: ${error}`,\n        wasClean: false,\n      });\n\n      setReadyState(ReadyState.CLOSED);\n      webSocketInstance.close();\n    }\n    \n    if (optionsRef.current.retryOnError) {\n      if (reconnectCount.current < (optionsRef.current.reconnectAttempts ?? DEFAULT_RECONNECT_LIMIT)) {\n        const nextReconnectInterval = typeof optionsRef.current.reconnectInterval === 'function' ?\n          optionsRef.current.reconnectInterval(reconnectCount.current) :\n          optionsRef.current.reconnectInterval;\n\n        reconnectTimeout = window.setTimeout(() => {\n          reconnectCount.current++;\n          reconnect();\n        }, nextReconnectInterval ?? DEFAULT_RECONNECT_INTERVAL_MS);\n      } else {\n        optionsRef.current.onReconnectStop && optionsRef.current.onReconnectStop(optionsRef.current.reconnectAttempts as number);\n        console.warn(`Max reconnect attempts of ${optionsRef.current.reconnectAttempts} exceeded`);\n      }\n    }\n  };\n\n  return () => reconnectTimeout && window.clearTimeout(reconnectTimeout);\n};\n\nexport const attachListeners = (\n    webSocketInstance: WebSocketLike,\n    setters: Setters,\n    optionsRef: MutableRefObject<Options>,\n    reconnect: () => void,\n    reconnectCount: MutableRefObject<number>,\n    sendMessage: SendMessage,\n  ): (() => void) => {\n  const { setLastMessage, setReadyState } = setters;\n\n  let interval: number;\n  let cancelReconnectOnClose: () => void;\n  let cancelReconnectOnError: () => void;\n\n  if (optionsRef.current.fromSocketIO) {\n    interval = setUpSocketIOPing(sendMessage);\n  }\n\n  bindMessageHandler(\n    webSocketInstance,\n    optionsRef,\n    setLastMessage,\n  );\n\n  bindOpenHandler(\n    webSocketInstance,\n    optionsRef,\n    setReadyState,\n    reconnectCount,\n  );\n\n  cancelReconnectOnClose = bindCloseHandler(\n    webSocketInstance,\n    optionsRef,\n    setReadyState,\n    reconnect,\n    reconnectCount,\n  );\n\n  cancelReconnectOnError = bindErrorHandler(\n    webSocketInstance,\n    optionsRef,\n    setReadyState,\n    reconnect,\n    reconnectCount,\n  );\n\n  return () => {\n    setReadyState(ReadyState.CLOSING);\n    cancelReconnectOnClose();\n    cancelReconnectOnError();\n    webSocketInstance.close();\n    if (interval) clearInterval(interval);\n  };\n};\n","import { sharedWebSockets } from './globals';\nimport { DEFAULT_RECONNECT_LIMIT, DEFAULT_RECONNECT_INTERVAL_MS, ReadyState, isEventSourceSupported } from './constants';\nimport { getSubscribers } from './manage-subscribers';\nimport { MutableRefObject } from 'react';\nimport { HeartbeatOptions, Options, SendMessage, WebSocketLike } from './types';\nimport { setUpSocketIOPing } from './socket-io';\nimport { heartbeat } from './heartbeat';\n\nconst bindMessageHandler = (\n  webSocketInstance: WebSocketLike,\n  url: string,\n  heartbeatOptions?: boolean | HeartbeatOptions\n) => {\n  let onMessageCb: () => void;\n\n  if (heartbeatOptions && webSocketInstance instanceof WebSocket) {\n    onMessageCb = heartbeat(webSocketInstance, typeof heartbeatOptions === 'boolean' ? undefined : heartbeatOptions);\n  }\n\n  webSocketInstance.onmessage = (message: WebSocketEventMap['message']) => {\n    onMessageCb?.();\n    getSubscribers(url).forEach(subscriber => {\n      if (subscriber.optionsRef.current.onMessage) {\n        subscriber.optionsRef.current.onMessage(message);\n      }\n\n      if (\n        typeof subscriber.optionsRef.current.filter === 'function' &&\n        subscriber.optionsRef.current.filter(message) !== true\n      ) {\n        return;\n      }\n\n      if (\n        heartbeatOptions &&\n        typeof heartbeatOptions !== \"boolean\" &&\n        heartbeatOptions?.returnMessage === message.data\n      )\n        return;\n\n      subscriber.setLastMessage(message);\n    });\n  };\n};\n\nconst bindOpenHandler = (\n  webSocketInstance: WebSocketLike,\n  url: string,\n) => {\n  webSocketInstance.onopen = (event: WebSocketEventMap['open']) => {\n    getSubscribers(url).forEach(subscriber => {\n      subscriber.reconnectCount.current = 0;\n      if (subscriber.optionsRef.current.onOpen) {\n        subscriber.optionsRef.current.onOpen(event);\n      }\n\n      subscriber.setReadyState(ReadyState.OPEN);\n    });\n  };\n};\n\nconst bindCloseHandler = (\n  webSocketInstance: WebSocketLike,\n  url: string,\n) => {\n  if (webSocketInstance instanceof WebSocket) {\n    webSocketInstance.onclose = (event: WebSocketEventMap['close']) => {\n      getSubscribers(url).forEach(subscriber => {\n        if (subscriber.optionsRef.current.onClose) {\n          subscriber.optionsRef.current.onClose(event);\n        }\n  \n        subscriber.setReadyState(ReadyState.CLOSED);\n      });\n      \n      delete sharedWebSockets[url];\n  \n      getSubscribers(url).forEach(subscriber => {\n        if (\n          subscriber.optionsRef.current.shouldReconnect &&\n          subscriber.optionsRef.current.shouldReconnect(event)\n        ) {\n          const reconnectAttempts = subscriber.optionsRef.current.reconnectAttempts ?? DEFAULT_RECONNECT_LIMIT;\n          if (subscriber.reconnectCount.current < reconnectAttempts) {\n            const nextReconnectInterval = typeof subscriber.optionsRef.current.reconnectInterval === 'function' ?\n              subscriber.optionsRef.current.reconnectInterval(subscriber.reconnectCount.current) :\n              subscriber.optionsRef.current.reconnectInterval;\n\n            setTimeout(() => {\n              subscriber.reconnectCount.current++;\n              subscriber.reconnect.current();\n            }, nextReconnectInterval ?? DEFAULT_RECONNECT_INTERVAL_MS);\n          } else {\n            subscriber.optionsRef.current.onReconnectStop && subscriber.optionsRef.current.onReconnectStop(subscriber.optionsRef.current.reconnectAttempts as number);\n            console.warn(`Max reconnect attempts of ${reconnectAttempts} exceeded`);\n          }\n        }\n      });\n    };\n  }\n};\n\nconst bindErrorHandler = (\n  webSocketInstance: WebSocketLike,\n  url: string,\n) => {\n  webSocketInstance.onerror = (error: WebSocketEventMap['error']) => {\n    getSubscribers(url).forEach(subscriber => {\n      if (subscriber.optionsRef.current.onError) {\n        subscriber.optionsRef.current.onError(error);\n      }\n      if (isEventSourceSupported && webSocketInstance instanceof EventSource) {\n        subscriber.optionsRef.current.onClose && subscriber.optionsRef.current.onClose({\n          ...error,\n          code: 1006,\n          reason: `An error occurred with the EventSource: ${error}`,\n          wasClean: false,\n        });\n  \n        subscriber.setReadyState(ReadyState.CLOSED);\n      }\n    });\n    if (isEventSourceSupported && webSocketInstance instanceof EventSource) {\n      webSocketInstance.close();\n    }\n  };\n};\n\nexport const attachSharedListeners = (\n  webSocketInstance: WebSocketLike,\n  url: string,\n  optionsRef: MutableRefObject<Options>,\n  sendMessage: SendMessage,\n) => {\n  let interval: number;\n\n  if (optionsRef.current.fromSocketIO) {\n    interval = setUpSocketIOPing(sendMessage);\n  }\n\n  bindMessageHandler(webSocketInstance, url, optionsRef.current.heartbeat);\n  bindCloseHandler(webSocketInstance, url);\n  bindOpenHandler(webSocketInstance, url);\n  bindErrorHandler(webSocketInstance, url);\n\n  return () => {\n    if (interval) clearInterval(interval);\n  };\n};\n","import { EventSourceEventHandlers, EventSourceOptions } from \"./types\";\n\nconst MILLISECONDS = 1;\nconst SECONDS = 1000 * MILLISECONDS;\n\nexport const DEFAULT_OPTIONS = {};\nexport const EMPTY_EVENT_HANDLERS: EventSourceEventHandlers = {};\nexport const DEFAULT_EVENT_SOURCE_OPTIONS: EventSourceOptions = {\n  withCredentials: false,\n  events: EMPTY_EVENT_HANDLERS,\n};\nexport const SOCKET_IO_PING_INTERVAL = 25 * SECONDS;\nexport const SOCKET_IO_PATH = '/socket.io/?EIO=3&transport=websocket';\nexport const SOCKET_IO_PING_CODE = '2';\nexport const DEFAULT_RECONNECT_LIMIT = 20;\nexport const DEFAULT_RECONNECT_INTERVAL_MS = 5000;\nexport const UNPARSABLE_JSON_OBJECT = {};\nexport const DEFAULT_HEARTBEAT = {\n  message: 'ping',\n  timeout: 60000,\n  interval: 25000,\n};\n\nexport enum ReadyState {\n  UNINSTANTIATED = -1,\n  CONNECTING = 0,\n  OPEN = 1,\n  CLOSING = 2,\n  CLOSED = 3,\n}\n\nconst eventSourceSupported = () => {\n  try {\n    return 'EventSource' in globalThis;\n  } catch (e) {\n    return false;\n  }\n}\n\nexport const isReactNative = typeof navigator !== 'undefined' && navigator.product === 'ReactNative';\nexport const isEventSourceSupported = !isReactNative && eventSourceSupported();\n","import { MutableRefObject } from 'react';\nimport { sharedWebSockets } from './globals';\nimport { Options, SendMessage, Subscriber, WebSocketLike } from './types';\nimport { isEventSourceSupported, ReadyState, isReactNative } from './constants';\nimport { attachListeners } from './attach-listener';\nimport { attachSharedListeners } from './attach-shared-listeners';\nimport { addSubscriber, removeSubscriber, hasSubscribers } from './manage-subscribers';\n\n//TODO ensure that all onClose callbacks are called\n\nconst cleanSubscribers = (\n  url: string,\n  subscriber: Subscriber,\n  optionsRef: MutableRefObject<Options>,\n  setReadyState: (readyState: ReadyState) => void,\n  clearSocketIoPingInterval: (() => void) | null,\n) => {\n  return () => {\n    removeSubscriber(url, subscriber);\n    if (!hasSubscribers(url)) {\n      try {\n        const socketLike = sharedWebSockets[url];\n        if (socketLike instanceof WebSocket) {\n          socketLike.onclose = (event: WebSocketEventMap['close']) => {\n            if (optionsRef.current.onClose) {\n              optionsRef.current.onClose(event);\n            }\n            setReadyState(ReadyState.CLOSED);\n          };\n        }\n        socketLike.close();\n      } catch (e) {\n\n      }\n      if (clearSocketIoPingInterval) clearSocketIoPingInterval();\n\n      delete sharedWebSockets[url];\n    }\n  }\n};\n\nexport const createOrJoinSocket = (\n  webSocketRef: MutableRefObject<WebSocketLike | null>,\n  url: string,\n  setReadyState: (readyState: ReadyState) => void,\n  optionsRef: MutableRefObject<Options>,\n  setLastMessage: (message: WebSocketEventMap['message']) => void,\n  startRef: MutableRefObject<() => void>,\n  reconnectCount: MutableRefObject<number>,\n  sendMessage: SendMessage,\n): (() => void) => {\n  if (!isEventSourceSupported && optionsRef.current.eventSourceOptions) {\n    if (isReactNative) {\n      throw new Error('EventSource is not supported in ReactNative');\n    } else {\n      throw new Error('EventSource is not supported');\n    }\n  }\n\n  if (optionsRef.current.share) {\n    let clearSocketIoPingInterval: ((() => void) | null) = null;\n    if (sharedWebSockets[url] === undefined) {\n      sharedWebSockets[url] = optionsRef.current.eventSourceOptions ?\n        new EventSource(url, optionsRef.current.eventSourceOptions) :\n        new WebSocket(url, optionsRef.current.protocols);\n      webSocketRef.current = sharedWebSockets[url];\n      setReadyState(ReadyState.CONNECTING);\n      clearSocketIoPingInterval = attachSharedListeners(\n        sharedWebSockets[url],\n        url,\n        optionsRef,\n        sendMessage,\n      );\n    } else {\n      webSocketRef.current = sharedWebSockets[url];\n      setReadyState(sharedWebSockets[url].readyState);\n    }\n\n    const subscriber: Subscriber = {\n      setLastMessage,\n      setReadyState,\n      optionsRef,\n      reconnectCount,\n      reconnect: startRef,\n    };\n  \n    addSubscriber(url, subscriber);\n\n    return cleanSubscribers(\n      url,\n      subscriber,\n      optionsRef,\n      setReadyState,\n      clearSocketIoPingInterval,\n    );\n  } else {\n    webSocketRef.current = optionsRef.current.eventSourceOptions ?\n      new EventSource(url, optionsRef.current.eventSourceOptions) :\n      new WebSocket(url, optionsRef.current.protocols);\n    setReadyState(ReadyState.CONNECTING);\n    if (!webSocketRef.current) {\n      throw new Error('WebSocket failed to be created');\n    }\n\n    return attachListeners(\n      webSocketRef.current,\n      {\n        setLastMessage,\n        setReadyState\n      },\n      optionsRef,\n      startRef.current,\n      reconnectCount,\n      sendMessage,\n    );\n  }\n};\n","import { MutableRefObject } from 'react';\nimport { parseSocketIOUrl, appendQueryParams } from './socket-io';\nimport { Options } from './types';\nimport { DEFAULT_RECONNECT_INTERVAL_MS, DEFAULT_RECONNECT_LIMIT } from './constants';\n\nconst waitFor = (duration: number) => new Promise(resolve => window.setTimeout(resolve, duration));\n\nexport const getUrl = async (\n  url: string | (() => string | Promise<string>),\n  optionsRef: MutableRefObject<Options>,\n  retriedAttempts: number = 0,\n): Promise<string | null> => {\n  let convertedUrl: string;\n\n  if (typeof url === 'function') {\n    try {\n      convertedUrl = await url();\n    } catch (e) {\n      if (\n        optionsRef.current.retryOnError\n      ) {\n        const reconnectLimit = optionsRef.current.reconnectAttempts ?? DEFAULT_RECONNECT_LIMIT;\n        if (retriedAttempts < reconnectLimit) {\n            const nextReconnectInterval = typeof optionsRef.current.reconnectInterval === 'function' ?\n              optionsRef.current.reconnectInterval(retriedAttempts) :\n              optionsRef.current.reconnectInterval;\n    \n            await waitFor(nextReconnectInterval ?? DEFAULT_RECONNECT_INTERVAL_MS);\n            return getUrl(url, optionsRef, retriedAttempts + 1);\n          } else {\n            optionsRef.current.onReconnectStop?.(retriedAttempts);\n            return null;\n          }\n      } else {\n        return null;\n      }\n    }\n  } else {\n    convertedUrl = url;\n  }\n\n  const parsedUrl = optionsRef.current.fromSocketIO ?\n    parseSocketIOUrl(convertedUrl) :\n    convertedUrl;\n\n  const parsedWithQueryParams = optionsRef.current.queryParams ?\n    appendQueryParams(\n      parsedUrl,\n      optionsRef.current.queryParams\n    ) :\n    parsedUrl;\n\n  return parsedWithQueryParams;\n};\n","import { WebSocketLike } from \"./types\";\n\nexport interface SharedWebSockets {\n  [url: string]: WebSocketLike;\n}\n\nexport const sharedWebSockets: SharedWebSockets = {};\n\nexport const resetWebSockets = (url?: string): void => {\n  if (url && sharedWebSockets.hasOwnProperty(url)) {\n    delete sharedWebSockets[url];\n  } else {\n    for (let url in sharedWebSockets){\n      if (sharedWebSockets.hasOwnProperty(url)){\n        delete sharedWebSockets[url];\n      }\n    }\n  }\n}\n","import { DEFAULT_HEARTBEAT } from \"./constants\";\nimport { HeartbeatOptions } from \"./types\";\n\nexport function heartbeat(ws: WebSocket, options?: HeartbeatOptions): () => void {\n  const {\n    interval = DEFAULT_HEARTBEAT.interval,\n    timeout = DEFAULT_HEARTBEAT.timeout,\n    message = DEFAULT_HEARTBEAT.message,\n  } = options || {};\n\n  let messageAccepted = false;\n\n  const pingTimer = setInterval(() => {\n    try {\n      if (typeof message === 'function') {\n        ws.send(message());\n      } else {\n        ws.send(message);\n      }\n    } catch (error) {\n      // do nothing\n    }\n  }, interval);\n\n  const timeoutTimer = setInterval(() => {\n    if (!messageAccepted) {\n      ws.close();\n    } else {\n      messageAccepted = false;\n    }\n  }, timeout);\n\n  ws.addEventListener(\"close\", () => {\n    clearInterval(pingTimer);\n    clearInterval(timeoutTimer);\n  });\n\n  return () => {\n    messageAccepted = true;\n  };\n}\n","import { Subscriber } from './types';\n\nexport type Subscribers = {\n    [url: string]: Set<Subscriber>,\n}\n  \nconst subscribers: Subscribers = {};\nconst EMPTY_LIST: Subscriber[] = [];\n\nexport const getSubscribers = (url: string): Subscriber[] => {\n    if (hasSubscribers(url)) {\n        return Array.from(subscribers[url]);\n    }\n    return EMPTY_LIST;\n};\n\nexport const hasSubscribers = (url: string): boolean => {\n    return subscribers[url]?.size > 0;\n};\n\nexport const addSubscriber = (url: string, subscriber: Subscriber): void => {\n    subscribers[url] = subscribers[url] || new Set<Subscriber>();\n    subscribers[url].add(subscriber);\n};\n\nexport const removeSubscriber = (url: string, subscriber: Subscriber): void => {\n    subscribers[url].delete(subscriber);\n};\n\nexport const resetSubscribers = (url?: string): void => {\n    if (url && subscribers.hasOwnProperty(url)) {\n        delete subscribers[url];\n    } else {\n        for (let url in subscribers){\n            if (subscribers.hasOwnProperty(url)){\n                delete subscribers[url];\n            }\n        }\n    }\n}\n","import { MutableRefObject } from 'react';\n\ntype IfEquals<X, Y, A=X, B=never> =\n  (<T>() => T extends X ? 1 : 2) extends\n  (<T>() => T extends Y ? 1 : 2) ? A : B;\n\ntype WritableKeys<T> = {\n  [P in keyof T]-?: IfEquals<{ [Q in P]: T[P] }, { -readonly [Q in P]: T[P] }, P>\n}[keyof T];\n\nexport const websocketWrapper = (\n  webSocket: WebSocket,\n  start: MutableRefObject<() => void>,\n): WebSocket => {\n\n  return new Proxy<WebSocket>(webSocket, {\n    get: (obj, key: keyof WebSocket) => {\n      const val = obj[key];\n      if ((key as any) === 'reconnect') return start;\n      if (typeof val === 'function') {\n        console.error('Calling methods directly on the websocket is not supported at this moment. You must use the methods returned by useWebSocket.');\n        \n        //Prevent error thrown by invoking a non-function\n        return () => {};\n      } else {\n        return val;\n      }\n    },\n    set: <T extends WritableKeys<WebSocket>>(obj: WebSocket, key: T, val: WebSocket[T]) => {\n      if (/^on/.test(key)) {\n        console.warn('The websocket\\'s event handlers should be defined through the options object passed into useWebSocket.')\n        return false;\n      } else {\n        obj[key] = val;\n        return true;\n      }\n    },\n  });\n};\n\nexport default websocketWrapper;\n","import { SOCKET_IO_PING_INTERVAL, SOCKET_IO_PATH, SOCKET_IO_PING_CODE } from './constants';\nimport { QueryParams, SendMessage } from './types';\n\nexport const parseSocketIOUrl = (url: string) => {\n  if (url) {\n    const isSecure = /^https|wss/.test(url);\n    const strippedProtocol = url.replace(/^(https?|wss?)(:\\/\\/)?/, '');\n    const removedFinalBackSlack = strippedProtocol.replace(/\\/$/, '');\n    const protocol = isSecure ? 'wss' : 'ws';\n\n    return `${protocol}://${removedFinalBackSlack}${SOCKET_IO_PATH}`;\n  } else if (url === '') {\n    const isSecure = /^https/.test(window.location.protocol);\n    const protocol = isSecure ? 'wss' : 'ws';\n    const port = window.location.port ? `:${window.location.port}` : '';\n\n    return `${protocol}://${window.location.hostname}${port}${SOCKET_IO_PATH}`;\n  }\n\n  return url;\n};\n\nexport const appendQueryParams = (url: string, params: QueryParams = {}): string => {\n  const hasParamsRegex = /\\?([\\w]+=[\\w]+)/;\n  const alreadyHasParams = hasParamsRegex.test(url);\n\n  const stringified = `${Object.entries(params).reduce((next, [key, value]) => {\n    return next + `${key}=${value}&`;\n  }, '').slice(0, -1)}`;\n\n  return `${url}${alreadyHasParams ? '&' : '?'}${stringified}`;\n};\n\nexport const setUpSocketIOPing = (sendMessage: SendMessage, interval = SOCKET_IO_PING_INTERVAL) => {\n  const ping = () => sendMessage(SOCKET_IO_PING_CODE);\n\n  return window.setInterval(ping, interval);\n};\n","import { useEffect, useRef } from 'react'\nimport { useWebSocket } from './use-websocket'\nimport { DEFAULT_EVENT_SOURCE_OPTIONS, EMPTY_EVENT_HANDLERS } from './constants'\nimport { EventSourceOptions, Options, EventSourceHook, EventSourceEventHandlers } from './types';\n\nexport const useEventSource = (\n  url: string | (() => string | Promise<string>) | null,\n  { withCredentials, events, ...options }: EventSourceOptions = DEFAULT_EVENT_SOURCE_OPTIONS,\n  connect: boolean = true,\n): EventSourceHook => {\n  const optionsWithEventSource: Options = {\n      ...options,\n      eventSourceOptions: {\n        withCredentials,\n      }\n  };\n  const eventsRef = useRef<EventSourceEventHandlers>(EMPTY_EVENT_HANDLERS);\n  if (events) {\n    eventsRef.current = events\n  }\n\n  const {\n    lastMessage,\n    readyState,\n    getWebSocket,\n  } = useWebSocket(\n    url,\n    optionsWithEventSource,\n    connect,\n  );\n\n  useEffect(() => {\n    if (lastMessage?.type) {\n        Object.entries(eventsRef.current).forEach(([type, handler]) => {\n            if (type === lastMessage.type) {\n                handler(lastMessage);\n            }\n        });\n    }\n  }, [lastMessage]);\n\n  return {\n    lastEvent: lastMessage,\n    readyState,\n    getEventSource: getWebSocket,\n  };\n}\n","import { useMemo } from 'react'\nimport { useWebSocket } from './use-websocket'\nimport { DEFAULT_OPTIONS } from './constants'\nimport { Options, WebSocketHook } from './types';\n\nexport interface SocketIOMessageData<T = unknown> {\n  type: string,\n  payload: T | null,\n}\n\nconst emptyEvent: SocketIOMessageData<null> = {\n  type: 'empty',\n  payload: null,\n}\n\nconst getSocketData = <T = unknown>(event: WebSocketEventMap['message'] | null): SocketIOMessageData<T | null> => {\n  if (!event || !event.data) {\n    return emptyEvent\n  }\n\n  const match = event.data.match(/\\[.*]/)\n\n  if (!match) {\n    return emptyEvent\n  }\n\n  const data = JSON.parse(match)\n\n  if (!Array.isArray(data) || !data[1]) {\n    return emptyEvent\n  }\n\n  return {\n    type: data[0],\n    payload: data[1],\n  }\n}\n\nexport const useSocketIO = <T = unknown>(\n  url: string | (() => string | Promise<string>) | null,\n  options: Options = DEFAULT_OPTIONS,\n  connect: boolean = true,\n): WebSocketHook<SocketIOMessageData<T | null>, SocketIOMessageData<T | null>> => {\n  const optionsWithSocketIO = useMemo(() => ({\n    ...options,\n    fromSocketIO: true,\n  }), [])\n\n  const {\n    sendMessage,\n    sendJsonMessage,\n    lastMessage,\n    readyState,\n    getWebSocket,\n  } = useWebSocket(\n\n    url,\n    optionsWithSocketIO,\n    connect,\n  );\n\n  const socketIOLastMessage = useMemo(() =>\n    getSocketData<T>(lastMessage), [lastMessage]);\n\n  return {\n    sendMessage,\n    sendJsonMessage,\n    lastMessage: socketIOLastMessage,\n    lastJsonMessage: socketIOLastMessage,\n    readyState,\n    getWebSocket,\n  };\n}\n","import { useEffect, useRef, useState, useCallback, useMemo } from 'react';\nimport { flushSync } from 'react-dom';\nimport { DEFAULT_OPTIONS, isEventSourceSupported, ReadyState, UNPARSABLE_JSON_OBJECT } from './constants';\nimport { createOrJoinSocket } from './create-or-join';\nimport { getUrl } from './get-url';\nimport websocketWrapper from './proxy';\nimport {\n  Options,\n  ReadyStateState,\n  SendMessage,\n  SendJsonMessage,\n  WebSocketMessage,\n  WebSocketHook,\n  WebSocketLike,\n} from './types';\nimport { assertIsWebSocket } from './util';\n\nexport const useWebSocket = <T = unknown>(\n  url: string | (() => string | Promise<string>) | null,\n  options: Options = DEFAULT_OPTIONS,\n  connect: boolean = true,\n): WebSocketHook<T> => {\n  const [lastMessage, setLastMessage] = useState<WebSocketEventMap['message'] | null>(null);\n  const [readyState, setReadyState] = useState<ReadyStateState>({});\n  const lastJsonMessage: T = useMemo(() => {\n    if (lastMessage) {\n      try {\n        return JSON.parse(lastMessage.data);\n      } catch (e) {\n        return UNPARSABLE_JSON_OBJECT;\n      }\n    }\n    return null; \n  },[lastMessage]);\n  const convertedUrl = useRef<string | null>(null);\n  const webSocketRef = useRef<WebSocketLike | null>(null);\n  const startRef = useRef<() => void>(() => void 0);\n  const reconnectCount = useRef<number>(0);\n  const messageQueue = useRef<WebSocketMessage[]>([]);\n  const webSocketProxy = useRef<WebSocketLike | null>(null);\n  const optionsCache = useRef<Options>(options);\n  optionsCache.current = options;\n\n  const readyStateFromUrl: ReadyState =\n    convertedUrl.current && readyState[convertedUrl.current] !== undefined ?\n      readyState[convertedUrl.current] :\n      url !== null && connect === true ?\n        ReadyState.CONNECTING :\n        ReadyState.UNINSTANTIATED;\n\n  const stringifiedQueryParams = options.queryParams ? JSON.stringify(options.queryParams) : null;\n\n  const sendMessage: SendMessage = useCallback((message, keep = true) => {\n    if (isEventSourceSupported && webSocketRef.current instanceof EventSource) {\n      console.warn('Unable to send a message from an eventSource');\n      return;\n    }\n  \n    if (webSocketRef.current?.readyState === ReadyState.OPEN) {\n      assertIsWebSocket(webSocketRef.current, optionsCache.current.skipAssert);\n      webSocketRef.current.send(message);\n    } else if (keep) {\n      messageQueue.current.push(message);\n    }\n  }, []);\n\n  const sendJsonMessage: SendJsonMessage = useCallback((message, keep = true) => {\n    sendMessage(JSON.stringify(message), keep);\n  }, [sendMessage]);\n  \n  const getWebSocket = useCallback(() => {\n    if (optionsCache.current.share !== true || (isEventSourceSupported && webSocketRef.current instanceof EventSource)) {\n      return webSocketRef.current;\n    }\n\n    if (webSocketProxy.current === null && webSocketRef.current) {\n      assertIsWebSocket(webSocketRef.current, optionsCache.current.skipAssert);\n      webSocketProxy.current = websocketWrapper(webSocketRef.current, startRef);\n    }\n\n    return webSocketProxy.current;\n  }, []);\n\n  useEffect(() => {\n    if (url !== null && connect === true) {\n      let removeListeners: () => void;\n      let expectClose = false;\n      let createOrJoin = true;\n\n      const start = async () => {\n        convertedUrl.current = await getUrl(url, optionsCache);\n\n        if (convertedUrl.current === null) {\n          console.error('Failed to get a valid URL. WebSocket connection aborted.');\n          convertedUrl.current = 'ABORTED';\n          flushSync(() => setReadyState(prev => ({\n            ...prev,\n            ABORTED: ReadyState.CLOSED,\n          })));\n\n          return;\n        }\n\n        const protectedSetLastMessage = (message: WebSocketEventMap['message']) => {\n          if (!expectClose) {\n            flushSync(() => setLastMessage(message));\n          }\n        };\n  \n        const protectedSetReadyState = (state: ReadyState) => {\n          if (!expectClose) {\n            flushSync(() => setReadyState(prev => ({\n              ...prev,\n              ...(convertedUrl.current && {[convertedUrl.current]: state}),\n            })));\n          }\n        };\n\n        if(createOrJoin) {\n          removeListeners = createOrJoinSocket(\n            webSocketRef,\n            convertedUrl.current,\n            protectedSetReadyState,\n            optionsCache,\n            protectedSetLastMessage,\n            startRef,\n            reconnectCount,\n            sendMessage,\n          );\n        }\n      };\n\n      startRef.current = () => {\n        if (!expectClose) {\n          if (webSocketProxy.current) webSocketProxy.current = null;\n          removeListeners?.();\n          start();\n        }\n      };\n    \n      start();\n      return () => {\n        expectClose = true;\n        createOrJoin = false;\n        if (webSocketProxy.current) webSocketProxy.current = null;\n        removeListeners?.();\n        setLastMessage(null);\n      };\n    } else if (url === null || connect === false) {\n      reconnectCount.current = 0; // reset reconnection attempts\n      setReadyState(prev => ({\n        ...prev,\n        ...(convertedUrl.current && {[convertedUrl.current]: ReadyState.CLOSED}),\n      }));\n    }\n  }, [url, connect, stringifiedQueryParams, sendMessage]);\n\n  useEffect(() => {\n    if (readyStateFromUrl === ReadyState.OPEN) {\n      messageQueue.current.splice(0).forEach(message => {\n        sendMessage(message);\n      });\n    }\n  }, [readyStateFromUrl]);\n\n  return {\n    sendMessage,\n    sendJsonMessage,\n    lastMessage,\n    lastJsonMessage,\n    readyState: readyStateFromUrl,\n    getWebSocket,\n  };\n};\n","import { WebSocketLike } from './types';\nimport { resetWebSockets } from './globals';\nimport { resetSubscribers } from './manage-subscribers';\n\nexport function assertIsWebSocket (\n    webSocketInstance: WebSocketLike,\n    skip?: boolean,\n): asserts webSocketInstance is WebSocket {\n    if (!skip && webSocketInstance instanceof WebSocket === false) throw new Error('');\n};\n\n\nexport function resetGlobalState (url?: string): void {\n    resetSubscribers(url);\n    resetWebSockets(url);\n};\n"],"names":["Trace","dispatch","useAppDispatch","messages","useSelector","state","trace","traceStarted","statusCode","setStatusCode","useState","method","setMethod","func","setFunc","path","setPath","threshold","setThreshold","all","setAll","s3","setS3","internal","setInternal","storage","setStorage","os","setOS","errors","setErrors","toggleFilter","setToggleFilter","logActive","setLogActive","wsUrl","setWsUrl","useEffect","url","URL","window","location","toString","wsProt","wsProtocol","protocol","port","calls","c","push","join","baseLocation","document","baseURI","pathname","hostname","searchParams","append","href","sendMessage","lastJsonMessage","readyState","useWebSocket","heartbeat","message","interval","timeout","ReadyState","CONNECTING","traceResetMessages","OPEN","setTraceStarted","CLOSED","ptime","DateTime","fromISO","time","toJSDate","key","Math","random","traceMessageReceived","setHelpName","_jsxs","Fragment","children","_jsx","PageHeaderWrapper","label","actions","HelpMenu","PageLayout","Box","withBorders","Grid","container","item","xs","sx","display","flexFlow","fontSize","fontWeight","padding","className","alignItems","justifyContent","border","breakPoints","md","gap","Checkbox","checked","id","name","onChange","value","disabled","TooltipWrapper","tooltip","Button","onClick","icon","FilterIcon","variant","style","width","background","useBackground","marginTop","marginBottom","InputBox","placeholder","e","target","gridTemplateColumns","flex","marginLeft","type","parseInt","DataTable","columns","elementKey","renderFunction","timeParse","Date","timeFromDate","fullElement","statusMsg","renderFullObject","host","client","niceBytes","isLoading","records","entityName","idField","customEmptyMessage","customPaperHeight","autoScrollToBottom","use_websocket_1","require","Object","enumerable","get","use_socket_io_1","constants_1","use_event_source_1","util_1","socket_io_1","heartbeat_1","exports","webSocketInstance","setters","optionsRef","reconnect","reconnectCount","cancelReconnectOnClose","cancelReconnectOnError","setLastMessage","setReadyState","current","fromSocketIO","setUpSocketIOPing","heartbeatCb","WebSocket","heartbeatOptions","undefined","onmessage","onMessage","filter","_a","returnMessage","data","bindMessageHandler","onopen","event","onOpen","bindOpenHandler","isEventSourceSupported","EventSource","assertIsWebSocket","skipAssert","onclose","onClose","shouldReconnect","reconnectAttempts","DEFAULT_RECONNECT_LIMIT","nextReconnectInterval","reconnectInterval","reconnectTimeout","setTimeout","DEFAULT_RECONNECT_INTERVAL_MS","onReconnectStop","console","warn","concat","clearTimeout","bindCloseHandler","onerror","error","onError","__assign","code","reason","wasClean","close","retryOnError","bindErrorHandler","CLOSING","clearInterval","globals_1","manage_subscribers_1","onMessageCb","getSubscribers","forEach","subscriber","sharedWebSockets","withCredentials","events","EMPTY_EVENT_HANDLERS","navigator","product","isReactNative","globalThis","eventSourceSupported","attach_listener_1","attach_shared_listeners_1","webSocketRef","startRef","eventSourceOptions","Error","share","clearSocketIoPingInterval","protocols","attachSharedListeners","addSubscriber","removeSubscriber","hasSubscribers","socketLike","cleanSubscribers","attachListeners","retriedAttempts","convertedUrl","_d","sent","reconnectLimit","duration","Promise","resolve","getUrl","_c","_b","call","parsedUrl","parseSocketIOUrl","queryParams","appendQueryParams","hasOwnProperty","url_1","ws","options","DEFAULT_HEARTBEAT","messageAccepted","pingTimer","setInterval","send","timeoutTimer","addEventListener","subscribers","EMPTY_LIST","Array","from","size","Set","add","delete","webSocket","start","Proxy","obj","val","set","test","websocketWrapper","isSecure","removedFinalBackSlack","replace","SOCKET_IO_PATH","params","alreadyHasParams","stringified","entries","reduce","next","slice","SOCKET_IO_PING_INTERVAL","SOCKET_IO_PING_CODE","react_1","connect","DEFAULT_EVENT_SOURCE_OPTIONS","__rest","optionsWithEventSource","eventsRef","useRef","lastMessage","getWebSocket","handler","lastEvent","getEventSource","emptyEvent","payload","DEFAULT_OPTIONS","optionsWithSocketIO","useMemo","sendJsonMessage","socketIOLastMessage","match","JSON","parse","isArray","getSocketData","react_dom_1","create_or_join_1","get_url_1","proxy_1","__importDefault","UNPARSABLE_JSON_OBJECT","messageQueue","webSocketProxy","optionsCache","readyStateFromUrl","UNINSTANTIATED","stringifiedQueryParams","stringify","useCallback","keep","default","removeListeners_1","expectClose_1","createOrJoin_1","start_1","__awaiter","flushSync","prev","ABORTED","protectedSetLastMessage","protectedSetReadyState","createOrJoinSocket","splice","skip","resetSubscribers","resetWebSockets"],"sourceRoot":""}